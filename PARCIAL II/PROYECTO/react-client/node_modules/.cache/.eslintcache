[{"C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\index.js":"1","C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\App.js":"2","C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\components\\ChatRoom.js":"3","C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\nav\\head\\Header.js":"4","C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\nav\\footer\\Footer.js":"5","C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\components\\ChatRoomUI.js":"6"},{"size":232,"mtime":1722736803898,"results":"7","hashOfConfig":"8"},{"size":318,"mtime":1722736804893,"results":"9","hashOfConfig":"8"},{"size":55488,"mtime":1722736804895,"results":"10","hashOfConfig":"8"},{"size":169,"mtime":1722736803902,"results":"11","hashOfConfig":"8"},{"size":200,"mtime":1722736803900,"results":"12","hashOfConfig":"8"},{"size":9272,"mtime":1722736803896,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sc717b",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\index.js",[],"C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\App.js",[],"C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\components\\ChatRoom.js",["27","28","29","30","31"],"C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\nav\\head\\Header.js",[],"C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\nav\\footer\\Footer.js",[],"C:\\Users\\jhonn\\OneDrive\\Escritorio\\GitHub\\Distribuidas\\PARCIAL II\\PROYECTO\\react-client\\src\\components\\ChatRoomUI.js",["32","33"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../index.css\";\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser,\r\n  act,\r\n}) => {\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [publicChats, privateChats, tab]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        if (userData.message.trim()) {\r\n          sendValue();\r\n        }\r\n      } else {\r\n        if (userData.message.trim()) {\r\n          sendPrivateValue();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSendClick = () => {\r\n    if (userData.message.trim()) {\r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n\r\n  const getUserStatusIndicator = (user) => {\r\n    return (\r\n      <span\r\n        className={`status-indicator ${user.online ? \"online\" : \"offline\"}`}\r\n      ></span>\r\n    );\r\n  };\r\n  const getUserStatusClass = (user) => {\r\n    return user.online ? \"online\" : \"offline\";\r\n  };\r\n\r\n  const currentUser = allUsers.find(\r\n    (user) => user.username === userData.username\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n            </div>\r\n\r\n            <ul>\r\n              <li\r\n                onClick={() => setTab(\"CHATROOM\")}\r\n                className={`member ${tab === \"CHATROOM\" ? \"active\" : \"\"} ${\r\n                  unreadMessages.get(\"CHATROOM\") ? \"unread\" : \"\"\r\n                }`}\r\n              >\r\n                CHATROOM\r\n                {unreadMessages.get(\"CHATROOM\")\r\n                  ? `(${unreadMessages.get(\"CHATROOM\")}) Nuevo mensaje`\r\n                  : \"\"}\r\n              </li>\r\n              {filteredUsers.map((user, index) => (\r\n                <li\r\n                  onClick={() => setTab(user.username)}\r\n                  className={`member ${tab === user.username ? \"active\" : \"\"} ${\r\n                    user.username === userData.username ? \"current-user\" : \"\"\r\n                  } ${\r\n                    unreadMessages.get(user.username) ? \"unread\" : \"\"\r\n                  } ${getUserStatusClass(user)}`}\r\n                  key={index}\r\n                >\r\n                  <span\r\n                    className={`status-indicator ${\r\n                      user.isConnected ? \"online\" : \"offline\"\r\n                    }`}\r\n                  ></span>\r\n\r\n                  {user.username}\r\n                  {unreadMessages.get(user.username)\r\n                    ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje`\r\n                    : \"\"}\r\n                  {user.username === userData.username && (\r\n                    <span className=\"current-user-indicator\">(Tú)</span>\r\n                  )}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"chat-content\">\r\n            <header className=\"chat-header\">\r\n              {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n              <div className=\"chat-header\">\r\n                <span className=\"last-connection\">\r\n                  {allUsers.find((user) => user.username === tab)?.lastActive\r\n                    ? `Última conexión: ${new Date(\r\n                        allUsers.find(\r\n                          (user) => user.username === tab\r\n                        )?.lastActive\r\n                      ).toLocaleString()}`\r\n                    : \"ACTIVO\"}\r\n                </span>\r\n              </div>\r\n            </header>\r\n\r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\"\r\n                ? publicChats\r\n                : privateChats.get(tab) || []\r\n              ).map((chat, index) => (\r\n                <li\r\n                  className={`message ${\r\n                    chat.senderName === userData.username ? \"self\" : \"\"\r\n                  }`}\r\n                  key={index}\r\n                >\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                className=\"send-button\"\r\n                onClick={handleSendClick}\r\n              >\r\n                Enviar\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"contenedor\">\r\n            <button\r\n              className=\"logout-button\"\r\n              onClick={() => {\r\n                logoutUser();\r\n                act(userData.username);\r\n              }}\r\n            >\r\n              Cerrar sesión\r\n            </button>{\" \"}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div\r\n          className={`auth-form ${\r\n            isRegistering ? \"register-form\" : \"login-form\"\r\n          }`}\r\n        >\r\n          <h1>{isRegistering ? \"Registro\" : \"Inicio de sesión\"}</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">\r\n                  {error}\r\n                </p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                onClick={registerUser}\r\n                className=\"auth-button\"\r\n              >\r\n                Registrarse\r\n              </button>\r\n              <p>\r\n                ¿Ya tienes una cuenta?{\" \"}\r\n                <span onClick={() => setIsRegistering(false)}>\r\n                  Iniciar sesión\r\n                </span>\r\n              </p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <button type=\"button\" onClick={loginUser} className=\"auth-button\">\r\n                Iniciar sesión\r\n              </button>\r\n              <p>\r\n                ¿No tienes una cuenta?{\" \"}\r\n                <span onClick={() => setIsRegistering(true)}>Registrarse</span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoomUI;\r\n",{"ruleId":"34","severity":1,"message":"35","line":35,"column":6,"nodeType":"36","endLine":35,"endColumn":26,"suggestions":"37"},{"ruleId":"34","severity":1,"message":"38","line":41,"column":6,"nodeType":"36","endLine":41,"endColumn":11,"suggestions":"39"},{"ruleId":"34","severity":1,"message":"40","line":50,"column":6,"nodeType":"36","endLine":50,"endColumn":39,"suggestions":"41"},{"ruleId":"34","severity":1,"message":"40","line":60,"column":6,"nodeType":"36","endLine":60,"endColumn":39,"suggestions":"42"},{"ruleId":"34","severity":1,"message":"40","line":70,"column":6,"nodeType":"36","endLine":70,"endColumn":39,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":74,"column":9,"nodeType":"46","messageId":"47","endLine":74,"endColumn":31},{"ruleId":"44","severity":1,"message":"48","line":85,"column":9,"nodeType":"46","messageId":"47","endLine":85,"endColumn":20},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connect' and 'loadChatHistory'. Either include them or remove the dependency array.","ArrayExpression",["49"],"React Hook useEffect has missing dependencies: 'loadPrivateChatHistory' and 'userData.connected'. Either include them or remove the dependency array.",["50"],"React Hook useEffect has a missing dependency: 'userData.username'. Either include it or remove the dependency array. Outer scope values like 'stompClient' aren't valid dependencies because mutating them doesn't re-render the component.",["51"],["52"],["53"],"no-unused-vars","'getUserStatusIndicator' is assigned a value but never used.","Identifier","unusedVar","'currentUser' is assigned a value but never used.",{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},{"desc":"58","fix":"60"},{"desc":"58","fix":"61"},"Update the dependencies array to be: [connect, loadChatHistory, userData.connected]",{"range":"62","text":"63"},"Update the dependencies array to be: [loadPrivateChatHistory, tab, userData.connected]",{"range":"64","text":"65"},"Update the dependencies array to be: [userData.connected, userData.username]",{"range":"66","text":"67"},{"range":"68","text":"67"},{"range":"69","text":"67"},[1006,1026],"[connect, loadChatHistory, userData.connected]",[1154,1159],"[loadPrivateChatHistory, tab, userData.connected]",[1427,1460],"[userData.connected, userData.username]",[1724,1757],[2023,2056]]