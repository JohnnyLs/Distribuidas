{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import { over } from 'stompjs';\n// import SockJS from 'sockjs-client';\n// import ChatRoomUI from './ChatRoomUI';\n// var stompClient = null;\n// const ChatRoom = () => {\n//   const [privateChats, setPrivateChats] = useState(new Map());\n//   const [publicChats, setPublicChats] = useState([]);\n//   const [tab, setTab] = useState(\"CHATROOM\");\n//   const [unreadMessages, setUnreadMessages] = useState(new Map());\n//   const [userData, setUserData] = useState({\n//     username: '',\n//     receivername: '',\n//     connected: false,\n//     message: ''\n//   });\n//   useEffect(() => {\n//     console.log(userData);\n//   }, [userData]);\n//   const connect = () => {\n//     let Sock = new SockJS('http://localhost:8080/ws');\n//     stompClient = over(Sock);\n//     stompClient.connect({}, onConnected, onError);\n//   }\n// /*\n//   const onConnected = () => {\n//     setUserData({ ...userData, \"connected\": true });\n//     stompClient.subscribe('/chatroom/public', onMessageReceived);\n//     stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n//     userJoin();\n//   }*/\n//     const onConnected = () => {\n//       setUserData({ ...userData, \"connected\": true });\n//       stompClient.subscribe('/chatroom/public', onMessageReceived);\n//       stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n//       stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived); // Nueva suscripción\n//       userJoin();\n//   }\n//   const onNotificationReceived = (payload) => {\n//       var notification = JSON.parse(payload.body);\n//       alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\n//   }\n//   const userJoin = () => {\n//     var chatMessage = {\n//       senderName: userData.username,\n//       status: \"JOIN\"\n//     };\n//     stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n//   }\n//   const onMessageReceived = (payload) => {\n//     var payloadData = JSON.parse(payload.body);\n//     switch (payloadData.status) {\n//       case \"JOIN\":\n//         if (!privateChats.get(payloadData.senderName)) {\n//           privateChats.set(payloadData.senderName, []);\n//           setPrivateChats(new Map(privateChats));\n//         }\n//         break;\n//       case \"MESSAGE\":\n//         publicChats.push(payloadData);\n//         setPublicChats([...publicChats]);\n//         break;\n//     }\n//   }\n// /*\n//   const onPrivateMessage = (payload) => {\n//     console.log(payload);\n//     var payloadData = JSON.parse(payload.body);\n//     if (privateChats.get(payloadData.senderName)) {\n//       privateChats.get(payloadData.senderName).push(payloadData);\n//       setPrivateChats(new Map(privateChats));\n//     } else {\n//       let list = [];\n//       list.push(payloadData);\n//       privateChats.set(payloadData.senderName, list);\n//       setPrivateChats(new Map(privateChats));\n//     }\n//   }*/\n//     const onPrivateMessage = (payload) => {\n//       var payloadData = JSON.parse(payload.body);\n//       if (privateChats.get(payloadData.senderName)) {\n//         privateChats.get(payloadData.senderName).push(payloadData);\n//         setPrivateChats(new Map(privateChats));\n//       } else {\n//         let list = [];\n//         list.push(payloadData);\n//         privateChats.set(payloadData.senderName, list);\n//         setPrivateChats(new Map(privateChats));\n//       }\n//       if (tab !== payloadData.senderName) {\n//         let count = unreadMessages.get(payloadData.senderName) || 0;\n//         unreadMessages.set(payloadData.senderName, count + 1);\n//         setUnreadMessages(new Map(unreadMessages));\n//       }\n//     }\n//     const handleTabChange = (name) => {\n//       setTab(name);\n//       if (unreadMessages.get(name)) {\n//         unreadMessages.set(name, 0);\n//         setUnreadMessages(new Map(unreadMessages));\n//       }\n//     };\n//   const onError = (err) => {\n//     console.log(err);\n//   }\n//   const handleMessage = (event) => {\n//     const { value } = event.target;\n//     setUserData({ ...userData, \"message\": value });\n//   }\n//   const sendValue = () => {\n//     if (stompClient) {\n//       var chatMessage = {\n//         senderName: userData.username,\n//         message: userData.message,\n//         status: \"MESSAGE\"\n//       };\n//       console.log(chatMessage);\n//       stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, \"message\": \"\" });\n//     }\n//   }\n//   const sendPrivateValue = () => {\n//     if (stompClient) {\n//       var chatMessage = {\n//         senderName: userData.username,\n//         receiverName: tab,\n//         message: userData.message,\n//         status: \"MESSAGE\"\n//       };\n//       if (userData.username !== tab) {\n//         privateChats.get(tab).push(chatMessage);\n//         setPrivateChats(new Map(privateChats));\n//       }\n//       stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, \"message\": \"\" });\n//     }\n//   }\n//   const handleUsername = (event) => {\n//     const { value } = event.target;\n//     setUserData({ ...userData, \"username\": value });\n//   }\n//   const registerUser = () => {\n//     connect();\n//   }\n// /*\n//   return (\n//     <ChatRoomUI\n//       userData={userData}\n//       privateChats={privateChats}\n//       publicChats={publicChats}\n//       tab={tab}\n//       setTab={setTab}\n//       handleMessage={handleMessage}\n//       sendValue={sendValue}\n//       sendPrivateValue={sendPrivateValue}\n//       handleUsername={handleUsername}\n//       registerUser={registerUser}\n//     />\n//   );*/\n//   return (\n//     <ChatRoomUI\n//       userData={userData}\n//       privateChats={privateChats}\n//       publicChats={publicChats}\n//       tab={tab}\n//       //setTab={setTab}\n//       setTab={handleTabChange}\n//       handleMessage={handleMessage}\n//       sendValue={sendValue}\n//       sendPrivateValue={sendPrivateValue}\n//       handleUsername={handleUsername}\n//       registerUser={registerUser}\n//       unreadMessages={unreadMessages}\n//       //setUnreadMessages={setUnreadMessages} // Añadir esta línea\n//     />\n//   );\n// }\n// export default ChatRoom;\n\n/* \r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived);\r\n    userJoin();\r\n  }\r\n\r\n  const onNotificationReceived = (payload) => {\r\n    var notification = JSON.parse(payload.body);\r\n    alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, username: value });\r\n  }\r\n\r\n  const registerUser = () => {\r\n    setUserData({ ...userData, connected: true });\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      unreadMessages={unreadMessages}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n */\n\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n    const connect = () => {\r\n      let Sock = new SockJS('http://localhost:8080/ws');\r\n      stompClient = over(Sock);\r\n      stompClient.connect({username: userData.username}, onConnected, onError);\r\n    }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const onNotificationReceived = (payload) => {\r\n    var notification = JSON.parse(payload.body);\r\n    alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={setTab}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n*/\n\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;*/\n\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n*/\n// import React, { useEffect, useState } from 'react';\n// import { over } from 'stompjs';\n// import SockJS from 'sockjs-client';\n// import ChatRoomUI from './ChatRoomUI';\n// import axios from 'axios';\n// import DOMPurify from 'dompurify';\n// let stompClient = null;\n// const ChatRoom = () => {\n//   const [privateChats, setPrivateChats] = useState(new Map());\n//   const [publicChats, setPublicChats] = useState([]);\n//   const [tab, setTab] = useState(\"CHATROOM\");\n//   const [unreadMessages, setUnreadMessages] = useState(new Map());\n//   const [userData, setUserData] = useState({\n//     username: '',\n//     password: '',\n//     email: '',\n//     receivername: '',\n//     connected: false,\n//     message: '',\n//     errors: {}\n//   });\n//   const [isRegistering, setIsRegistering] = useState(false);\n//   useEffect(() => {\n//     if (userData.connected) {\n//       connect();\n//     }\n//   }, [userData.connected]);\n//   const connect = () => {\n//     let Sock = new SockJS('http://localhost:8080/ws');\n//     stompClient = over(Sock);\n//     stompClient.connect({username: userData.username}, onConnected, onError);\n//   }\n//   const onConnected = () => {\n//     setUserData({ ...userData, connected: true });\n//     stompClient.subscribe('/chatroom/public', onMessageReceived);\n//     stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n//     userJoin();\n//   }\n//   const userJoin = () => {\n//     var chatMessage = {\n//       senderName: userData.username,\n//       status: \"JOIN\"\n//     };\n//     stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n//   }\n//   const onMessageReceived = (payload) => {\n//     var payloadData = JSON.parse(payload.body);\n//     switch (payloadData.status) {\n//       case \"JOIN\":\n//         if (!privateChats.get(payloadData.senderName)) {\n//           privateChats.set(payloadData.senderName, []);\n//           setPrivateChats(new Map(privateChats));\n//         }\n//         break;\n//       case \"MESSAGE\":\n//         publicChats.push(payloadData);\n//         setPublicChats([...publicChats]);\n//         break;\n//     }\n//   }\n//   const sanitizeInput = (input) => {\n//     return DOMPurify.sanitize(input);\n//   };\n//   const onPrivateMessage = (payload) => {\n//     var payloadData = JSON.parse(payload.body);\n//     if (privateChats.get(payloadData.senderName)) {\n//       privateChats.get(payloadData.senderName).push(payloadData);\n//       setPrivateChats(new Map(privateChats));\n//     } else {\n//       let list = [];\n//       list.push(payloadData);\n//       privateChats.set(payloadData.senderName, list);\n//       setPrivateChats(new Map(privateChats));\n//     }\n//     if (tab !== payloadData.senderName) {\n//       setUnreadMessages(prevUnreadMessages => {\n//         const newUnreadMessages = new Map(prevUnreadMessages);\n//         const count = newUnreadMessages.get(payloadData.senderName) || 0;\n//         newUnreadMessages.set(payloadData.senderName, count + 1);\n//         return newUnreadMessages;\n//       });\n//     }\n//   }\n//   const handleTabChange = (name) => {\n//     setTab(name);\n//     setUnreadMessages(prevUnreadMessages => {\n//       const newUnreadMessages = new Map(prevUnreadMessages);\n//       newUnreadMessages.delete(name);\n//       return newUnreadMessages;\n//     });\n//   };\n//   const onError = (err) => {\n//     console.log(err);\n//   }\n//   const handleMessage = (event) => {\n//     const { value } = event.target;\n//     setUserData({ ...userData, message: value });\n//   }\n//   const sendValue = () => {\n//     if (stompClient) {\n//       var chatMessage = {\n//         senderName: userData.username,\n//         message: userData.message,\n//         status: \"MESSAGE\"\n//       };\n//       stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, message: \"\" });\n//     }\n//   }\n//   const sendPrivateValue = () => {\n//     if (stompClient) {\n//       var chatMessage = {\n//         senderName: userData.username,\n//         receiverName: tab,\n//         message: userData.message,\n//         status: \"MESSAGE\"\n//       };\n//       if (userData.username !== tab) {\n//         privateChats.get(tab).push(chatMessage);\n//         setPrivateChats(new Map(privateChats));\n//       }\n//       stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, message: \"\" });\n//     }\n//   }\n//   /*\n//   const handleUsername = (event) => {\n//     const { name, value } = event.target;\n//     if (name === \"username\") {\n//       // Filtrar los caracteres no permitidos solo para el campo de nombre de usuario\n//       const filteredValue = value.replace(/[^a-zA-Z]/g, '');\n//       setUserData({ ...userData, [name]: filteredValue });\n//     } else {\n//       // Para otros campos, simplemente actualizar el estado sin filtrar\n//       setUserData({ ...userData, [name]: value });\n//     }\n//   };*/\n//   const handleUsername = (event) => {\n//     const { name, value } = event.target;\n//     if (name === \"username\") {\n//       // Filtrar caracteres no válidos solo para el nombre de usuario\n//       const filteredValue = value.replace(/[^a-zA-Z]/g, '');\n//       setUserData({ ...userData, [name]: filteredValue });\n//     } else {\n//       // Sanitizar la entrada para otros campos\n//       const sanitizedValue = DOMPurify.sanitize(value);\n//       setUserData({ ...userData, [name]: sanitizedValue });\n//     }\n//   }\n//   const validateEmail = (email) => {\n//     const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//     return re.test(String(email).toLowerCase());\n//   };\n//   const validateUsername = (username) => {\n//     const re = /^[a-zA-Z]+$/;\n//     return re.test(username);\n//   };\n//   const validateFields = () => {\n//     const errors = {};\n//     if (!userData.username || !validateUsername(userData.username)) {\n//       errors.username = \"El nombre de usuario solo puede contener letras\";\n//     }\n//     if (!userData.password) {\n//       errors.password = \"La contraseña no puede estar vacía\";\n//     }\n//     if (!userData.email || !validateEmail(userData.email)) {\n//       errors.email = \"El email no es válido\";\n//     }\n//     return errors;\n//   };\n//   const registerUser = async () => {\n//     const errors = validateFields();\n//     if (Object.keys(errors).length > 0) {\n//       setUserData({ ...userData, errors });\n//       return;\n//     }\n//     try {\n//       const response = await axios.post('http://localhost:8080/api/auth/register', {\n//         username: userData.username,\n//         password: userData.password,\n//         email: userData.email\n//       });\n//       console.log(response.data);\n//       setIsRegistering(false);\n//     } catch (error) {\n//       console.error('Registration failed:', error.response.data);\n//     }\n//   }\n//   const loginUser = async () => {\n//     const errors = validateFields();\n//     if (Object.keys(errors).length > 0) {\n//       setUserData({ ...userData, errors });\n//       return;\n//     }\n//     try {\n//       const response = await axios.post('http://localhost:8080/api/auth/login', {\n//         username: userData.username,\n//         password: userData.password\n//       });\n//       console.log(response.data);\n//       setUserData({ ...userData, connected: true });\n//     } catch (error) {\n//       console.error('Login failed:', error.response.data);\n//     }\n//   }\n//   return (\n//     <ChatRoomUI\n//       userData={userData}\n//       privateChats={privateChats}\n//       publicChats={publicChats}\n//       tab={tab}\n//       setTab={handleTabChange}\n//       handleMessage={handleMessage}\n//       sendValue={sendValue}\n//       sendPrivateValue={sendPrivateValue}\n//       handleUsername={handleUsername}\n//       registerUser={registerUser}\n//       loginUser={loginUser}\n//       unreadMessages={unreadMessages}\n//       isRegistering={isRegistering}\n//       setIsRegistering={setIsRegistering}\n//     />\n//   );\n// }\n// export default ChatRoom;","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/Distribuidas/Distribuidas/PARCIAL II/PROYECTO/react-client/src/components/ChatRoom.js"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { over } from 'stompjs';\r\n// import SockJS from 'sockjs-client';\r\n// import ChatRoomUI from './ChatRoomUI';\r\n\r\n// var stompClient = null;\r\n\r\n// const ChatRoom = () => {\r\n//   const [privateChats, setPrivateChats] = useState(new Map());\r\n//   const [publicChats, setPublicChats] = useState([]);\r\n//   const [tab, setTab] = useState(\"CHATROOM\");\r\n//   const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n//   const [userData, setUserData] = useState({\r\n//     username: '',\r\n//     receivername: '',\r\n//     connected: false,\r\n//     message: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     console.log(userData);\r\n//   }, [userData]);\r\n\r\n//   const connect = () => {\r\n//     let Sock = new SockJS('http://localhost:8080/ws');\r\n//     stompClient = over(Sock);\r\n//     stompClient.connect({}, onConnected, onError);\r\n//   }\r\n// /*\r\n//   const onConnected = () => {\r\n//     setUserData({ ...userData, \"connected\": true });\r\n//     stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n//     stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n//     userJoin();\r\n//   }*/\r\n\r\n//     const onConnected = () => {\r\n//       setUserData({ ...userData, \"connected\": true });\r\n//       stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n//       stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n//       stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived); // Nueva suscripción\r\n//       userJoin();\r\n//   }\r\n  \r\n//   const onNotificationReceived = (payload) => {\r\n//       var notification = JSON.parse(payload.body);\r\n//       alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n//   }\r\n  \r\n\r\n//   const userJoin = () => {\r\n//     var chatMessage = {\r\n//       senderName: userData.username,\r\n//       status: \"JOIN\"\r\n//     };\r\n//     stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n//   }\r\n\r\n//   const onMessageReceived = (payload) => {\r\n//     var payloadData = JSON.parse(payload.body);\r\n//     switch (payloadData.status) {\r\n//       case \"JOIN\":\r\n//         if (!privateChats.get(payloadData.senderName)) {\r\n//           privateChats.set(payloadData.senderName, []);\r\n//           setPrivateChats(new Map(privateChats));\r\n//         }\r\n//         break;\r\n//       case \"MESSAGE\":\r\n//         publicChats.push(payloadData);\r\n//         setPublicChats([...publicChats]);\r\n//         break;\r\n//     }\r\n//   }\r\n// /*\r\n//   const onPrivateMessage = (payload) => {\r\n//     console.log(payload);\r\n//     var payloadData = JSON.parse(payload.body);\r\n//     if (privateChats.get(payloadData.senderName)) {\r\n//       privateChats.get(payloadData.senderName).push(payloadData);\r\n//       setPrivateChats(new Map(privateChats));\r\n//     } else {\r\n//       let list = [];\r\n//       list.push(payloadData);\r\n//       privateChats.set(payloadData.senderName, list);\r\n//       setPrivateChats(new Map(privateChats));\r\n//     }\r\n//   }*/\r\n\r\n//     const onPrivateMessage = (payload) => {\r\n//       var payloadData = JSON.parse(payload.body);\r\n//       if (privateChats.get(payloadData.senderName)) {\r\n//         privateChats.get(payloadData.senderName).push(payloadData);\r\n//         setPrivateChats(new Map(privateChats));\r\n//       } else {\r\n//         let list = [];\r\n//         list.push(payloadData);\r\n//         privateChats.set(payloadData.senderName, list);\r\n//         setPrivateChats(new Map(privateChats));\r\n//       }\r\n  \r\n//       if (tab !== payloadData.senderName) {\r\n//         let count = unreadMessages.get(payloadData.senderName) || 0;\r\n//         unreadMessages.set(payloadData.senderName, count + 1);\r\n//         setUnreadMessages(new Map(unreadMessages));\r\n//       }\r\n//     }\r\n\r\n//     const handleTabChange = (name) => {\r\n//       setTab(name);\r\n//       if (unreadMessages.get(name)) {\r\n//         unreadMessages.set(name, 0);\r\n//         setUnreadMessages(new Map(unreadMessages));\r\n//       }\r\n//     };\r\n    \r\n\r\n//   const onError = (err) => {\r\n//     console.log(err);\r\n//   }\r\n\r\n//   const handleMessage = (event) => {\r\n//     const { value } = event.target;\r\n//     setUserData({ ...userData, \"message\": value });\r\n//   }\r\n\r\n//   const sendValue = () => {\r\n//     if (stompClient) {\r\n//       var chatMessage = {\r\n//         senderName: userData.username,\r\n//         message: userData.message,\r\n//         status: \"MESSAGE\"\r\n//       };\r\n//       console.log(chatMessage);\r\n//       stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n//       setUserData({ ...userData, \"message\": \"\" });\r\n//     }\r\n//   }\r\n\r\n//   const sendPrivateValue = () => {\r\n//     if (stompClient) {\r\n//       var chatMessage = {\r\n//         senderName: userData.username,\r\n//         receiverName: tab,\r\n//         message: userData.message,\r\n//         status: \"MESSAGE\"\r\n//       };\r\n\r\n//       if (userData.username !== tab) {\r\n//         privateChats.get(tab).push(chatMessage);\r\n//         setPrivateChats(new Map(privateChats));\r\n//       }\r\n//       stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n//       setUserData({ ...userData, \"message\": \"\" });\r\n//     }\r\n//   }\r\n\r\n//   const handleUsername = (event) => {\r\n//     const { value } = event.target;\r\n//     setUserData({ ...userData, \"username\": value });\r\n//   }\r\n\r\n//   const registerUser = () => {\r\n//     connect();\r\n//   }\r\n// /*\r\n//   return (\r\n//     <ChatRoomUI\r\n//       userData={userData}\r\n//       privateChats={privateChats}\r\n//       publicChats={publicChats}\r\n//       tab={tab}\r\n//       setTab={setTab}\r\n//       handleMessage={handleMessage}\r\n//       sendValue={sendValue}\r\n//       sendPrivateValue={sendPrivateValue}\r\n//       handleUsername={handleUsername}\r\n//       registerUser={registerUser}\r\n//     />\r\n//   );*/\r\n\r\n//   return (\r\n//     <ChatRoomUI\r\n//       userData={userData}\r\n//       privateChats={privateChats}\r\n//       publicChats={publicChats}\r\n//       tab={tab}\r\n//       //setTab={setTab}\r\n//       setTab={handleTabChange}\r\n//       handleMessage={handleMessage}\r\n//       sendValue={sendValue}\r\n//       sendPrivateValue={sendPrivateValue}\r\n//       handleUsername={handleUsername}\r\n//       registerUser={registerUser}\r\n//       unreadMessages={unreadMessages}\r\n//       //setUnreadMessages={setUnreadMessages} // Añadir esta línea\r\n//     />\r\n//   );\r\n  \r\n  \r\n// }\r\n\r\n// export default ChatRoom;\r\n/* \r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived);\r\n    userJoin();\r\n  }\r\n\r\n  const onNotificationReceived = (payload) => {\r\n    var notification = JSON.parse(payload.body);\r\n    alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, username: value });\r\n  }\r\n\r\n  const registerUser = () => {\r\n    setUserData({ ...userData, connected: true });\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      unreadMessages={unreadMessages}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n    const connect = () => {\r\n      let Sock = new SockJS('http://localhost:8080/ws');\r\n      stompClient = over(Sock);\r\n      stompClient.connect({username: userData.username}, onConnected, onError);\r\n    }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const onNotificationReceived = (payload) => {\r\n    var notification = JSON.parse(payload.body);\r\n    alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={setTab}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n*/\r\n\r\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;*/\r\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { over } from 'stompjs';\r\n// import SockJS from 'sockjs-client';\r\n// import ChatRoomUI from './ChatRoomUI';\r\n// import axios from 'axios';\r\n// import DOMPurify from 'dompurify';\r\n\r\n// let stompClient = null;\r\n\r\n// const ChatRoom = () => {\r\n//   const [privateChats, setPrivateChats] = useState(new Map());\r\n//   const [publicChats, setPublicChats] = useState([]);\r\n//   const [tab, setTab] = useState(\"CHATROOM\");\r\n//   const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n//   const [userData, setUserData] = useState({\r\n//     username: '',\r\n//     password: '',\r\n//     email: '',\r\n//     receivername: '',\r\n//     connected: false,\r\n//     message: '',\r\n//     errors: {}\r\n//   });\r\n//   const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     if (userData.connected) {\r\n//       connect();\r\n//     }\r\n//   }, [userData.connected]);\r\n\r\n//   const connect = () => {\r\n//     let Sock = new SockJS('http://localhost:8080/ws');\r\n//     stompClient = over(Sock);\r\n//     stompClient.connect({username: userData.username}, onConnected, onError);\r\n//   }\r\n\r\n//   const onConnected = () => {\r\n//     setUserData({ ...userData, connected: true });\r\n//     stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n//     stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n//     userJoin();\r\n//   }\r\n\r\n//   const userJoin = () => {\r\n//     var chatMessage = {\r\n//       senderName: userData.username,\r\n//       status: \"JOIN\"\r\n//     };\r\n//     stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n//   }\r\n\r\n//   const onMessageReceived = (payload) => {\r\n//     var payloadData = JSON.parse(payload.body);\r\n//     switch (payloadData.status) {\r\n//       case \"JOIN\":\r\n//         if (!privateChats.get(payloadData.senderName)) {\r\n//           privateChats.set(payloadData.senderName, []);\r\n//           setPrivateChats(new Map(privateChats));\r\n//         }\r\n//         break;\r\n//       case \"MESSAGE\":\r\n//         publicChats.push(payloadData);\r\n//         setPublicChats([...publicChats]);\r\n//         break;\r\n//     }\r\n//   }\r\n\r\n//   const sanitizeInput = (input) => {\r\n//     return DOMPurify.sanitize(input);\r\n//   };\r\n\r\n//   const onPrivateMessage = (payload) => {\r\n//     var payloadData = JSON.parse(payload.body);\r\n//     if (privateChats.get(payloadData.senderName)) {\r\n//       privateChats.get(payloadData.senderName).push(payloadData);\r\n//       setPrivateChats(new Map(privateChats));\r\n//     } else {\r\n//       let list = [];\r\n//       list.push(payloadData);\r\n//       privateChats.set(payloadData.senderName, list);\r\n//       setPrivateChats(new Map(privateChats));\r\n//     }\r\n\r\n//     if (tab !== payloadData.senderName) {\r\n//       setUnreadMessages(prevUnreadMessages => {\r\n//         const newUnreadMessages = new Map(prevUnreadMessages);\r\n//         const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n//         newUnreadMessages.set(payloadData.senderName, count + 1);\r\n//         return newUnreadMessages;\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   const handleTabChange = (name) => {\r\n//     setTab(name);\r\n//     setUnreadMessages(prevUnreadMessages => {\r\n//       const newUnreadMessages = new Map(prevUnreadMessages);\r\n//       newUnreadMessages.delete(name);\r\n//       return newUnreadMessages;\r\n//     });\r\n//   };\r\n\r\n//   const onError = (err) => {\r\n//     console.log(err);\r\n//   }\r\n\r\n//   const handleMessage = (event) => {\r\n//     const { value } = event.target;\r\n//     setUserData({ ...userData, message: value });\r\n//   }\r\n\r\n//   const sendValue = () => {\r\n//     if (stompClient) {\r\n//       var chatMessage = {\r\n//         senderName: userData.username,\r\n//         message: userData.message,\r\n//         status: \"MESSAGE\"\r\n//       };\r\n//       stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n//       setUserData({ ...userData, message: \"\" });\r\n//     }\r\n//   }\r\n\r\n//   const sendPrivateValue = () => {\r\n//     if (stompClient) {\r\n//       var chatMessage = {\r\n//         senderName: userData.username,\r\n//         receiverName: tab,\r\n//         message: userData.message,\r\n//         status: \"MESSAGE\"\r\n//       };\r\n\r\n//       if (userData.username !== tab) {\r\n//         privateChats.get(tab).push(chatMessage);\r\n//         setPrivateChats(new Map(privateChats));\r\n//       }\r\n//       stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n//       setUserData({ ...userData, message: \"\" });\r\n//     }\r\n//   }\r\n\r\n//   /*\r\n//   const handleUsername = (event) => {\r\n//     const { name, value } = event.target;\r\n    \r\n//     if (name === \"username\") {\r\n//       // Filtrar los caracteres no permitidos solo para el campo de nombre de usuario\r\n//       const filteredValue = value.replace(/[^a-zA-Z]/g, '');\r\n//       setUserData({ ...userData, [name]: filteredValue });\r\n//     } else {\r\n//       // Para otros campos, simplemente actualizar el estado sin filtrar\r\n//       setUserData({ ...userData, [name]: value });\r\n//     }\r\n//   };*/\r\n\r\n//   const handleUsername = (event) => {\r\n//     const { name, value } = event.target;\r\n    \r\n//     if (name === \"username\") {\r\n//       // Filtrar caracteres no válidos solo para el nombre de usuario\r\n//       const filteredValue = value.replace(/[^a-zA-Z]/g, '');\r\n//       setUserData({ ...userData, [name]: filteredValue });\r\n//     } else {\r\n//       // Sanitizar la entrada para otros campos\r\n//       const sanitizedValue = DOMPurify.sanitize(value);\r\n//       setUserData({ ...userData, [name]: sanitizedValue });\r\n//     }\r\n//   }\r\n  \r\n\r\n//   const validateEmail = (email) => {\r\n//     const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n//     return re.test(String(email).toLowerCase());\r\n//   };\r\n\r\n//   const validateUsername = (username) => {\r\n//     const re = /^[a-zA-Z]+$/;\r\n//     return re.test(username);\r\n//   };\r\n\r\n//   const validateFields = () => {\r\n//     const errors = {};\r\n//     if (!userData.username || !validateUsername(userData.username)) {\r\n//       errors.username = \"El nombre de usuario solo puede contener letras\";\r\n//     }\r\n//     if (!userData.password) {\r\n//       errors.password = \"La contraseña no puede estar vacía\";\r\n//     }\r\n//     if (!userData.email || !validateEmail(userData.email)) {\r\n//       errors.email = \"El email no es válido\";\r\n//     }\r\n//     return errors;\r\n//   };\r\n\r\n//   const registerUser = async () => {\r\n//     const errors = validateFields();\r\n//     if (Object.keys(errors).length > 0) {\r\n//       setUserData({ ...userData, errors });\r\n//       return;\r\n//     }\r\n//     try {\r\n//       const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n//         username: userData.username,\r\n//         password: userData.password,\r\n//         email: userData.email\r\n//       });\r\n//       console.log(response.data);\r\n//       setIsRegistering(false);\r\n//     } catch (error) {\r\n//       console.error('Registration failed:', error.response.data);\r\n//     }\r\n//   }\r\n\r\n//   const loginUser = async () => {\r\n//     const errors = validateFields();\r\n//     if (Object.keys(errors).length > 0) {\r\n//       setUserData({ ...userData, errors });\r\n//       return;\r\n//     }\r\n//     try {\r\n//       const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n//         username: userData.username,\r\n//         password: userData.password\r\n//       });\r\n//       console.log(response.data);\r\n//       setUserData({ ...userData, connected: true });\r\n//     } catch (error) {\r\n//       console.error('Login failed:', error.response.data);\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <ChatRoomUI\r\n//       userData={userData}\r\n//       privateChats={privateChats}\r\n//       publicChats={publicChats}\r\n//       tab={tab}\r\n//       setTab={handleTabChange}\r\n//       handleMessage={handleMessage}\r\n//       sendValue={sendValue}\r\n//       sendPrivateValue={sendPrivateValue}\r\n//       handleUsername={handleUsername}\r\n//       registerUser={registerUser}\r\n//       loginUser={loginUser}\r\n//       unreadMessages={unreadMessages}\r\n//       isRegistering={isRegistering}\r\n//       setIsRegistering={setIsRegistering}\r\n//     />\r\n//   );\r\n// }\r\n\r\n// export default ChatRoom;\r\n"]},"metadata":{},"sourceType":"module"}