{"ast":null,"code":"/* import React, { useEffect, useRef, useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser,\r\n  act\r\n}) => {\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [publicChats, privateChats, tab]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        if (userData.message.trim()) {\r\n          sendValue();\r\n        }\r\n      } else {\r\n        if (userData.message.trim()) {\r\n          sendPrivateValue();\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleSendClick = () => {\r\n    if (userData.message.trim()) {\r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n  \r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  \r\n  const getUserStatusIndicator = (user) => {\r\n    return (\r\n      <span className={`status-indicator ${user.online ? 'online' : 'offline'}`}></span>\r\n    );\r\n  };\r\n  const getUserStatusClass = (user) => {\r\n    return user.online ? 'online' : 'offline';\r\n  };\r\n  \r\n\r\n  const currentUser = allUsers.find(user => user.username === userData.username);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n            </div>\r\n            \r\n            <ul>\r\n            <li\r\n  onClick={() => setTab(\"CHATROOM\")}\r\n  className={`member ${tab === \"CHATROOM\"? \"active\" : \"\"} ${unreadMessages.get(\"CHATROOM\")? \"unread\" : \"\"}`}\r\n>\r\n  CHATROOM\r\n  {unreadMessages.get(\"CHATROOM\")? `(${unreadMessages.get(\"CHATROOM\")}) Nuevo mensaje de ${unreadMessages.get(\"CHATROOM\").senderName}` : ''}\r\n</li>\r\n              {filteredUsers.map((user, index) => (\r\n              <li\r\n                onClick={() => setTab(user.username)}\r\n                className={`member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"} ${getUserStatusClass(user)}`}\r\n                key={index}\r\n              >\r\n                  <span className={`status-indicator ${user.isConnected? 'online' : 'offline'}`}></span>\r\n\r\n                {user.username}\r\n                {unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : ''}\r\n                {user.username === userData.username && <span className=\"current-user-indicator\">(Tú)</span>}\r\n\r\n              </li>\r\n            ))}\r\n\r\n            </ul>\r\n          </div>\r\n          \r\n          <div className=\"chat-content\">\r\n            \r\n          <header className=\"chat-header\">\r\n    {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n    <div className=\"chat-header\">\r\n      <span className=\"last-connection\">\r\n        {allUsers.find(user => user.username === tab)?.lastActive \r\n          ? `Última conexión: ${new Date(allUsers.find(user => user.username === tab)?.lastActive).toLocaleString()}`\r\n          : 'ACTIVO'}\r\n      </span>\r\n    </div>\r\n  </header>\r\n     \r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n              <div ref={messagesEndRef} /> \r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={handleSendClick}>Enviar</button>\r\n            </div>\r\n\r\n          </div>\r\n          \r\n          <div className='contenedor'>\r\n          <button className=\"logout-button\" onClick={() => {\r\n  logoutUser();\r\n  act(userData.username);\r\n}}>Cerrar sesión</button>          </div>\r\n        </div>\r\n      ) : (\r\n        <div className={`auth-form ${isRegistering ? 'register-form' : 'login-form'}`}>\r\n          <h1>{isRegistering ? 'Registro' : 'Inicio de sesión'}</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <button type=\"button\" onClick={registerUser} className=\"auth-button\">Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <button type=\"button\" onClick={loginUser} className=\"auth-button\">Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI; */","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/Distribuidas/Distribuidas/PARCIAL II/PROYECTO/react-client/src/components/ChatRoomUI.js"],"names":[],"mappingssourcesContent":["/* import React, { useEffect, useRef, useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser,\r\n  act\r\n}) => {\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [publicChats, privateChats, tab]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        if (userData.message.trim()) {\r\n          sendValue();\r\n        }\r\n      } else {\r\n        if (userData.message.trim()) {\r\n          sendPrivateValue();\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleSendClick = () => {\r\n    if (userData.message.trim()) {\r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n  \r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  \r\n  const getUserStatusIndicator = (user) => {\r\n    return (\r\n      <span className={`status-indicator ${user.online ? 'online' : 'offline'}`}></span>\r\n    );\r\n  };\r\n  const getUserStatusClass = (user) => {\r\n    return user.online ? 'online' : 'offline';\r\n  };\r\n  \r\n\r\n  const currentUser = allUsers.find(user => user.username === userData.username);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n            </div>\r\n            \r\n            <ul>\r\n            <li\r\n  onClick={() => setTab(\"CHATROOM\")}\r\n  className={`member ${tab === \"CHATROOM\"? \"active\" : \"\"} ${unreadMessages.get(\"CHATROOM\")? \"unread\" : \"\"}`}\r\n>\r\n  CHATROOM\r\n  {unreadMessages.get(\"CHATROOM\")? `(${unreadMessages.get(\"CHATROOM\")}) Nuevo mensaje de ${unreadMessages.get(\"CHATROOM\").senderName}` : ''}\r\n</li>\r\n              {filteredUsers.map((user, index) => (\r\n              <li\r\n                onClick={() => setTab(user.username)}\r\n                className={`member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"} ${getUserStatusClass(user)}`}\r\n                key={index}\r\n              >\r\n                  <span className={`status-indicator ${user.isConnected? 'online' : 'offline'}`}></span>\r\n\r\n                {user.username}\r\n                {unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : ''}\r\n                {user.username === userData.username && <span className=\"current-user-indicator\">(Tú)</span>}\r\n\r\n              </li>\r\n            ))}\r\n\r\n            </ul>\r\n          </div>\r\n          \r\n          <div className=\"chat-content\">\r\n            \r\n          <header className=\"chat-header\">\r\n    {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n    <div className=\"chat-header\">\r\n      <span className=\"last-connection\">\r\n        {allUsers.find(user => user.username === tab)?.lastActive \r\n          ? `Última conexión: ${new Date(allUsers.find(user => user.username === tab)?.lastActive).toLocaleString()}`\r\n          : 'ACTIVO'}\r\n      </span>\r\n    </div>\r\n  </header>\r\n     \r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n              <div ref={messagesEndRef} /> \r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={handleSendClick}>Enviar</button>\r\n            </div>\r\n\r\n          </div>\r\n          \r\n          <div className='contenedor'>\r\n          <button className=\"logout-button\" onClick={() => {\r\n  logoutUser();\r\n  act(userData.username);\r\n}}>Cerrar sesión</button>          </div>\r\n        </div>\r\n      ) : (\r\n        <div className={`auth-form ${isRegistering ? 'register-form' : 'login-form'}`}>\r\n          <h1>{isRegistering ? 'Registro' : 'Inicio de sesión'}</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <button type=\"button\" onClick={registerUser} className=\"auth-button\">Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n                className=\"auth-input\"\r\n              />\r\n              <button type=\"button\" onClick={loginUser} className=\"auth-button\">Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI; */"]},"metadata":{},"sourceType":"module"}