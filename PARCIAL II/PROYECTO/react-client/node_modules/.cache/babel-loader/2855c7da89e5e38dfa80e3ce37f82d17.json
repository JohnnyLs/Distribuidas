{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\Distribuidas\\\\Distribuidas\\\\PARCIAL II\\\\PROYECTO\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport ChatRoomUI from './ChatRoomUI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  /*\r\n    const onConnected = () => {\r\n      setUserData({ ...userData, \"connected\": true });\r\n      stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n      stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n      userJoin();\r\n    }*/\n\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived); // Nueva suscripción\n\n    userJoin();\n  };\n\n  const onNotificationReceived = payload => {\n    var notification = JSON.parse(payload.body);\n    alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  /*\r\n    const onPrivateMessage = (payload) => {\r\n      console.log(payload);\r\n      var payloadData = JSON.parse(payload.body);\r\n      if (privateChats.get(payloadData.senderName)) {\r\n        privateChats.get(payloadData.senderName).push(payloadData);\r\n        setPrivateChats(new Map(privateChats));\r\n      } else {\r\n        let list = [];\r\n        list.push(payloadData);\r\n        privateChats.set(payloadData.senderName, list);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n    }*/\n\n\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n\n    if (tab !== payloadData.senderName) {\n      let count = unreadMessages.get(payloadData.senderName) || 0;\n      unreadMessages.set(payloadData.senderName, count + 1);\n      setUnreadMessages(new Map(unreadMessages));\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const registerUser = () => {\n    connect();\n  };\n  /*\r\n    return (\r\n      <ChatRoomUI\r\n        userData={userData}\r\n        privateChats={privateChats}\r\n        publicChats={publicChats}\r\n        tab={tab}\r\n        setTab={setTab}\r\n        handleMessage={handleMessage}\r\n        sendValue={sendValue}\r\n        sendPrivateValue={sendPrivateValue}\r\n        handleUsername={handleUsername}\r\n        registerUser={registerUser}\r\n      />\r\n    );*/\n\n\n  return /*#__PURE__*/_jsxDEV(ChatRoomUI, {\n    userData: userData,\n    privateChats: privateChats,\n    publicChats: publicChats,\n    tab: tab,\n    setTab: setTab,\n    handleMessage: handleMessage,\n    sendValue: sendValue,\n    sendPrivateValue: sendPrivateValue,\n    handleUsername: handleUsername,\n    registerUser: registerUser,\n    unreadMessages: unreadMessages,\n    setUnreadMessages: setUnreadMessages // Añadir esta línea\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"+rsDvJAi3WWNdoSsTI/syZ2rAV4=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/Distribuidas/Distribuidas/PARCIAL II/PROYECTO/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","SockJS","ChatRoomUI","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","unreadMessages","setUnreadMessages","userData","setUserData","username","receivername","connected","message","console","log","connect","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","onNotificationReceived","userJoin","payload","notification","JSON","parse","body","alert","chatMessage","senderName","status","send","stringify","payloadData","get","set","push","list","count","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","registerUser"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\n\r\nvar stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(userData);\r\n  }, [userData]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n/*\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, \"connected\": true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }*/\r\n\r\n    const onConnected = () => {\r\n      setUserData({ ...userData, \"connected\": true });\r\n      stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n      stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n      stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived); // Nueva suscripción\r\n      userJoin();\r\n  }\r\n  \r\n  const onNotificationReceived = (payload) => {\r\n      var notification = JSON.parse(payload.body);\r\n      alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n  }\r\n  \r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n/*\r\n  const onPrivateMessage = (payload) => {\r\n    console.log(payload);\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n  }*/\r\n\r\n    const onPrivateMessage = (payload) => {\r\n      var payloadData = JSON.parse(payload.body);\r\n      if (privateChats.get(payloadData.senderName)) {\r\n        privateChats.get(payloadData.senderName).push(payloadData);\r\n        setPrivateChats(new Map(privateChats));\r\n      } else {\r\n        let list = [];\r\n        list.push(payloadData);\r\n        privateChats.set(payloadData.senderName, list);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n  \r\n      if (tab !== payloadData.senderName) {\r\n        let count = unreadMessages.get(payloadData.senderName) || 0;\r\n        unreadMessages.set(payloadData.senderName, count + 1);\r\n        setUnreadMessages(new Map(unreadMessages));\r\n      }\r\n    }\r\n    \r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, \"message\": value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      console.log(chatMessage);\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, \"message\": \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, \"message\": \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, \"username\": value });\r\n  }\r\n\r\n  const registerUser = () => {\r\n    connect();\r\n  }\r\n/*\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={setTab}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n    />\r\n  );*/\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={setTab}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      unreadMessages={unreadMessages}\r\n      setUnreadMessages={setUnreadMessages} // Añadir esta línea\r\n    />\r\n  );\r\n  \r\n  \r\n}\r\n\r\nexport default ChatRoom;\r\n"]},"metadata":{},"sourceType":"module"}