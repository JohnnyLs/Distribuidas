{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\Distribuidas\\\\Distribuidas\\\\PARCIAL II\\\\PROYECTO\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\nimport DOMPurify from 'dompurify';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n    errors: {}\r\n  });\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n      fetchAllUsers();\r\n      loadChatHistory();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  useEffect(() => {\r\n    if (tab !== \"CHATROOM\" && userData.connected) {\r\n      loadPrivateChatHistory(tab);\r\n    }\r\n  }, [tab]);\r\n\r\n  const loadPrivateChatHistory = async (receiverName) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=${receiverName}`);\r\n      const sortedMessages = response.data.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      setPrivateChats(new Map(privateChats.set(receiverName, sortedMessages)));\r\n    } catch (error) {\r\n      console.error('Error loading private chat history:', error);\r\n    }\r\n  };\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({ username: userData.username }, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n    fetchAllUsers();\r\n    loadChatHistory();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const fetchAllUsers = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/users/all');\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch users:', error);\r\n    }\r\n  };\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        let msgs = privateChats.get(tab) || [];\r\n        msgs.push(chatMessage);\r\n        setPrivateChats(new Map(privateChats.set(tab, msgs)));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const searchUsers = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/users/search`, {\r\n        params: { query: searchQuery }\r\n      });\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Error searching users:', error);\r\n    }\r\n  };\r\n\r\n  const loadChatHistory = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=ALL`);\r\n      const sortedMessages = response.data.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      setPublicChats(sortedMessages);\r\n    } catch (error) {\r\n      console.error('Error loading chat history:', error);\r\n    }\r\n  };\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        fetchAllUsers();\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n      case \"NEW_USER\":\r\n        fetchAllUsers();\r\n        break;\r\n      default:\r\n        setAllUsers([...allUsers, payloadData]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const sanitizeInput = (input) => {\r\n    return DOMPurify.sanitize(input);\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    const payloadData = JSON.parse(payload.body);\r\n    setPrivateChats(prevChats => {\r\n        const updatedChats = new Map(prevChats);\r\n        const currentMessages = updatedChats.get(payloadData.senderName) || [];\r\n        updatedChats.set(payloadData.senderName, [...currentMessages, payloadData]);\r\n        return updatedChats;\r\n    });\r\n    if (tab !== payloadData.senderName) {\r\n        setUnreadMessages(prevUnreadMessages => {\r\n            const newUnreadMessages = new Map(prevUnreadMessages);\r\n            const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n            newUnreadMessages.set(payloadData.senderName, count + 1);\r\n            return newUnreadMessages;\r\n        });\r\n    }\r\n};\r\n\r\n\r\n  const updateUserOnlineStatus = (username, online) => {\r\n    setAllUsers(prevUsers => prevUsers.map(user =>\r\n      user.username === username ? { ...user, online } : user\r\n    ));\r\n  };\r\n\r\n  const renderUserStatus = (user) => {\r\n    return user.online ? (\r\n      <span style={{ color: 'green' }}>Online</span>\r\n    ) : (\r\n      <span style={{ color: 'red' }}>Offline</span>\r\n    );\r\n  };\r\n\r\n  const renderUserList = () => {\r\n    return allUsers.map(user => (\r\n      <div key={user.username} style={{ margin: '10px 0' }}>\r\n        <span>{user.username}</span> {renderUserStatus(user)}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n\r\n    setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        newUnreadMessages.delete(name);\r\n        return newUnreadMessages;\r\n    });\r\n\r\n    if (name !== \"CHATROOM\") {\r\n        loadPrivateChatHistory(name);\r\n    }\r\n};\r\n\r\n  const handleSearch = (event) => {\r\n    const query = event.target.value;\r\n    setSearchQuery(query);\r\n    if (query.length > 0) {\r\n      searchUsers(query);\r\n    } else {\r\n      fetchAllUsers();\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    if (name === \"username\") {\r\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\r\n      setUserData({ ...userData, [name]: filteredValue });\r\n    } else {\r\n      setUserData({ ...userData, [name]: value });\r\n      const sanitizedValue = DOMPurify.sanitize(value);\r\n      setUserData({ ...userData, [name]: sanitizedValue });\r\n    }\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const validateUsername = (username) => {\r\n    const re = /^[a-zA-Z]+$/;\r\n    return re.test(username);\r\n  };\r\n\r\n  const validateFields = () => {\r\n    const errors = {};\r\n    if (!userData.username || !validateUsername(userData.username)) {\r\n      errors.username = \"El nombre de usuario solo puede contener letras\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    if (!userData.email || !validateEmail(userData.email)) {\r\n      errors.email = \"El email no es válido\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const registerUser = async () => {\r\n    const errors = validateFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const validateLoginFields = () => {\r\n    const errors = {};\r\n    if (!userData.username) {\r\n      errors.username = \"El nombre de usuario no puede estar vacío\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    return errors;\r\n  };\r\n  \r\n  const loginUser = async () => {\r\n    const errors = validateLoginFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true, errors: {} });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n      setUserData({ ...userData, errors: { ...errors, login: 'Nombre de usuario o contraseña incorrectos' } });\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n      allUsers={allUsers}\r\n      searchQuery={searchQuery}\r\n      setSearchQuery={setSearchQuery}\r\n      searchUsers={searchUsers}\r\n      renderUserStatus={searchUsers}\r\n      renderUserList={searchUsers}\r\n\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n\r\n\r\n\r\n\r\n\r\n*/\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport ChatRoomUI from './ChatRoomUI';\nimport axios from 'axios';\nimport DOMPurify from 'dompurify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\n  const [allUsers, setAllUsers] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [userData, setUserData] = useState({\n    username: '',\n    password: '',\n    email: '',\n    receivername: '',\n    connected: false,\n    message: '',\n    errors: {}\n  });\n  const [isRegistering, setIsRegistering] = useState(false);\n  useEffect(() => {\n    if (userData.connected) {\n      connect();\n      fetchAllUsers();\n      loadChatHistory();\n    }\n  }, [userData.connected]);\n  useEffect(() => {\n    if (tab !== \"CHATROOM\" && userData.connected) {\n      loadPrivateChatHistory(tab);\n    }\n  }, [tab]);\n\n  const loadPrivateChatHistory = async receiverName => {\n    try {\n      const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=${receiverName}`);\n      const sortedMessages = response.data.sort((a, b) => new Date(a.date) - new Date(b.date));\n      setPrivateChats(new Map(privateChats.set(receiverName, sortedMessages)));\n    } catch (error) {\n      console.error('Error loading private chat history:', error);\n    }\n  };\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({\n      username: userData.username\n    }, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n    fetchAllUsers();\n    loadChatHistory();\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const fetchAllUsers = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/users/all');\n      setAllUsers(response.data);\n    } catch (error) {\n      console.error('Failed to fetch users:', error);\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      }; // Solo agregar el mensaje a la lista de mensajes privados si el destinatario no es el propio usuario\n\n      if (userData.username !== tab) {\n        let msgs = privateChats.get(tab) || [];\n        msgs.push(chatMessage);\n        setPrivateChats(new Map(privateChats.set(tab, msgs)));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        message: \"\"\n      });\n    }\n  };\n\n  const searchUsers = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8080/api/users/search`, {\n        params: {\n          query: searchQuery\n        }\n      });\n      setAllUsers(response.data);\n    } catch (error) {\n      console.error('Error searching users:', error);\n    }\n  };\n\n  const loadChatHistory = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=ALL`);\n      const sortedMessages = response.data.sort((a, b) => new Date(a.date) - new Date(b.date));\n      setPublicChats(sortedMessages);\n    } catch (error) {\n      console.error('Error loading chat history:', error);\n    }\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        fetchAllUsers();\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n\n      case \"NEW_USER\":\n        fetchAllUsers();\n        break;\n\n      default:\n        setAllUsers([...allUsers, payloadData]);\n        break;\n    }\n  };\n\n  const sanitizeInput = input => {\n    return DOMPurify.sanitize(input);\n  };\n\n  const onPrivateMessage = payload => {\n    const payloadData = JSON.parse(payload.body);\n    setPrivateChats(prevChats => {\n      const updatedChats = new Map(prevChats);\n      const currentMessages = updatedChats.get(payloadData.senderName) || []; // Evitar agregar el mensaje dos veces si es enviado a uno mismo\n\n      if (payloadData.senderName !== userData.username || payloadData.receiverName !== userData.username) {\n        updatedChats.set(payloadData.senderName, [...currentMessages, payloadData]);\n      }\n\n      return updatedChats;\n    });\n\n    if (tab !== payloadData.senderName) {\n      setUnreadMessages(prevUnreadMessages => {\n        const newUnreadMessages = new Map(prevUnreadMessages);\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\n        newUnreadMessages.set(payloadData.senderName, count + 1);\n        return newUnreadMessages;\n      });\n    }\n  };\n\n  const updateUserOnlineStatus = (username, online) => {\n    setAllUsers(prevUsers => prevUsers.map(user => user.username === username ? { ...user,\n      online\n    } : user));\n  };\n\n  const renderUserStatus = user => {\n    return user.online ? /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: 'green'\n      },\n      children: \"Online\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: 'red'\n      },\n      children: \"Offline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderUserList = () => {\n    return allUsers.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this), \" \", renderUserStatus(user)]\n    }, user.username, true, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 7\n    }, this));\n  };\n\n  const handleTabChange = name => {\n    setTab(name);\n    setUnreadMessages(prevUnreadMessages => {\n      const newUnreadMessages = new Map(prevUnreadMessages);\n      newUnreadMessages.delete(name);\n      return newUnreadMessages;\n    });\n\n    if (name !== \"CHATROOM\") {\n      loadPrivateChatHistory(name);\n    }\n  };\n\n  const handleSearch = event => {\n    const query = event.target.value;\n    setSearchQuery(query);\n\n    if (query.length > 0) {\n      searchUsers(query);\n    } else {\n      fetchAllUsers();\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      message: value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        message: \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      name,\n      value\n    } = event.target;\n\n    if (name === \"username\") {\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\n      setUserData({ ...userData,\n        [name]: filteredValue\n      });\n    } else {\n      setUserData({ ...userData,\n        [name]: value\n      });\n      const sanitizedValue = DOMPurify.sanitize(value);\n      setUserData({ ...userData,\n        [name]: sanitizedValue\n      });\n    }\n  };\n\n  const validateEmail = email => {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(String(email).toLowerCase());\n  };\n\n  const validateUsername = username => {\n    const re = /^[a-zA-Z]+$/;\n    return re.test(username);\n  };\n\n  const validateFields = () => {\n    const errors = {};\n\n    if (!userData.username || !validateUsername(userData.username)) {\n      errors.username = \"El nombre de usuario solo puede contener letras\";\n    }\n\n    if (!userData.password) {\n      errors.password = \"La contraseña no puede estar vacía\";\n    }\n\n    if (!userData.email || !validateEmail(userData.email)) {\n      errors.email = \"El email no es válido\";\n    }\n\n    return errors;\n  };\n\n  const registerUser = async () => {\n    const errors = validateFields();\n\n    if (Object.keys(errors).length > 0) {\n      setUserData({ ...userData,\n        errors\n      });\n      return;\n    }\n\n    const response = await axios.post('http://localhost:8080/api/users/register', {\n      username: userData.username,\n      password: userData.password,\n      email: userData.email\n    });\n\n    if (response.status === 200) {\n      setUserData({ ...userData,\n        connected: true,\n        errors: {}\n      });\n      connect();\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      if (tab === \"CHATROOM\") {\n        sendValue();\n      } else {\n        sendPrivateValue();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatRoomUI, {\n    userData: userData,\n    privateChats: privateChats,\n    publicChats: publicChats,\n    tab: tab,\n    unreadMessages: unreadMessages,\n    allUsers: allUsers,\n    searchQuery: searchQuery,\n    isRegistering: isRegistering,\n    handleUsername: handleUsername,\n    setIsRegistering: setIsRegistering,\n    handleMessage: handleMessage,\n    handleTabChange: handleTabChange,\n    handleKeyDown: handleKeyDown,\n    setUserData: setUserData,\n    setSearchQuery: setSearchQuery,\n    sendPrivateValue: sendPrivateValue,\n    sendValue: sendValue,\n    registerUser: registerUser,\n    renderUserList: renderUserList,\n    handleSearch: handleSearch,\n    sanitizeInput: sanitizeInput\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 670,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"A1PgZ30za/kCGmPHX+/L3QgZxQY=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/Distribuidas/Distribuidas/PARCIAL II/PROYECTO/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","SockJS","ChatRoomUI","axios","DOMPurify","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","unreadMessages","setUnreadMessages","allUsers","setAllUsers","searchQuery","setSearchQuery","userData","setUserData","username","password","email","receivername","connected","message","errors","isRegistering","setIsRegistering","connect","fetchAllUsers","loadChatHistory","loadPrivateChatHistory","receiverName","response","get","sortedMessages","data","sort","a","b","Date","date","set","error","console","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","sendPrivateValue","msgs","push","searchUsers","params","query","payload","payloadData","parse","body","sanitizeInput","input","sanitize","prevChats","updatedChats","currentMessages","prevUnreadMessages","newUnreadMessages","count","updateUserOnlineStatus","online","prevUsers","map","user","renderUserStatus","color","renderUserList","margin","handleTabChange","name","delete","handleSearch","event","target","value","length","err","log","handleMessage","sendValue","handleUsername","filteredValue","replace","sanitizedValue","validateEmail","re","test","String","toLowerCase","validateUsername","validateFields","registerUser","Object","keys","post","handleKeyDown","key"],"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","sourcesContent":["/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\nimport DOMPurify from 'dompurify';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n    errors: {}\r\n  });\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n      fetchAllUsers();\r\n      loadChatHistory();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  useEffect(() => {\r\n    if (tab !== \"CHATROOM\" && userData.connected) {\r\n      loadPrivateChatHistory(tab);\r\n    }\r\n  }, [tab]);\r\n\r\n  const loadPrivateChatHistory = async (receiverName) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=${receiverName}`);\r\n      const sortedMessages = response.data.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      setPrivateChats(new Map(privateChats.set(receiverName, sortedMessages)));\r\n    } catch (error) {\r\n      console.error('Error loading private chat history:', error);\r\n    }\r\n  };\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({ username: userData.username }, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n    fetchAllUsers();\r\n    loadChatHistory();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const fetchAllUsers = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/users/all');\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch users:', error);\r\n    }\r\n  };\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        let msgs = privateChats.get(tab) || [];\r\n        msgs.push(chatMessage);\r\n        setPrivateChats(new Map(privateChats.set(tab, msgs)));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const searchUsers = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/users/search`, {\r\n        params: { query: searchQuery }\r\n      });\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Error searching users:', error);\r\n    }\r\n  };\r\n\r\n  const loadChatHistory = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=ALL`);\r\n      const sortedMessages = response.data.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      setPublicChats(sortedMessages);\r\n    } catch (error) {\r\n      console.error('Error loading chat history:', error);\r\n    }\r\n  };\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        fetchAllUsers();\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n      case \"NEW_USER\":\r\n        fetchAllUsers();\r\n        break;\r\n      default:\r\n        setAllUsers([...allUsers, payloadData]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const sanitizeInput = (input) => {\r\n    return DOMPurify.sanitize(input);\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    const payloadData = JSON.parse(payload.body);\r\n    setPrivateChats(prevChats => {\r\n        const updatedChats = new Map(prevChats);\r\n        const currentMessages = updatedChats.get(payloadData.senderName) || [];\r\n        updatedChats.set(payloadData.senderName, [...currentMessages, payloadData]);\r\n        return updatedChats;\r\n    });\r\n    if (tab !== payloadData.senderName) {\r\n        setUnreadMessages(prevUnreadMessages => {\r\n            const newUnreadMessages = new Map(prevUnreadMessages);\r\n            const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n            newUnreadMessages.set(payloadData.senderName, count + 1);\r\n            return newUnreadMessages;\r\n        });\r\n    }\r\n};\r\n\r\n\r\n  const updateUserOnlineStatus = (username, online) => {\r\n    setAllUsers(prevUsers => prevUsers.map(user =>\r\n      user.username === username ? { ...user, online } : user\r\n    ));\r\n  };\r\n\r\n  const renderUserStatus = (user) => {\r\n    return user.online ? (\r\n      <span style={{ color: 'green' }}>Online</span>\r\n    ) : (\r\n      <span style={{ color: 'red' }}>Offline</span>\r\n    );\r\n  };\r\n\r\n  const renderUserList = () => {\r\n    return allUsers.map(user => (\r\n      <div key={user.username} style={{ margin: '10px 0' }}>\r\n        <span>{user.username}</span> {renderUserStatus(user)}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n\r\n    setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        newUnreadMessages.delete(name);\r\n        return newUnreadMessages;\r\n    });\r\n\r\n    if (name !== \"CHATROOM\") {\r\n        loadPrivateChatHistory(name);\r\n    }\r\n};\r\n\r\n  const handleSearch = (event) => {\r\n    const query = event.target.value;\r\n    setSearchQuery(query);\r\n    if (query.length > 0) {\r\n      searchUsers(query);\r\n    } else {\r\n      fetchAllUsers();\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    if (name === \"username\") {\r\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\r\n      setUserData({ ...userData, [name]: filteredValue });\r\n    } else {\r\n      setUserData({ ...userData, [name]: value });\r\n      const sanitizedValue = DOMPurify.sanitize(value);\r\n      setUserData({ ...userData, [name]: sanitizedValue });\r\n    }\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const validateUsername = (username) => {\r\n    const re = /^[a-zA-Z]+$/;\r\n    return re.test(username);\r\n  };\r\n\r\n  const validateFields = () => {\r\n    const errors = {};\r\n    if (!userData.username || !validateUsername(userData.username)) {\r\n      errors.username = \"El nombre de usuario solo puede contener letras\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    if (!userData.email || !validateEmail(userData.email)) {\r\n      errors.email = \"El email no es válido\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const registerUser = async () => {\r\n    const errors = validateFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const validateLoginFields = () => {\r\n    const errors = {};\r\n    if (!userData.username) {\r\n      errors.username = \"El nombre de usuario no puede estar vacío\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    return errors;\r\n  };\r\n  \r\n  const loginUser = async () => {\r\n    const errors = validateLoginFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true, errors: {} });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n      setUserData({ ...userData, errors: { ...errors, login: 'Nombre de usuario o contraseña incorrectos' } });\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n      allUsers={allUsers}\r\n      searchQuery={searchQuery}\r\n      setSearchQuery={setSearchQuery}\r\n      searchUsers={searchUsers}\r\n      renderUserStatus={searchUsers}\r\n      renderUserList={searchUsers}\r\n\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n\r\n\r\n\r\n\r\n\r\n*/\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\nimport DOMPurify from 'dompurify';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n    errors: {}\r\n  });\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n      fetchAllUsers();\r\n      loadChatHistory();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  useEffect(() => {\r\n    if (tab !== \"CHATROOM\" && userData.connected) {\r\n      loadPrivateChatHistory(tab);\r\n    }\r\n  }, [tab]);\r\n\r\n  const loadPrivateChatHistory = async (receiverName) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=${receiverName}`);\r\n      const sortedMessages = response.data.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      setPrivateChats(new Map(privateChats.set(receiverName, sortedMessages)));\r\n    } catch (error) {\r\n      console.error('Error loading private chat history:', error);\r\n    }\r\n  };\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({ username: userData.username }, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n    fetchAllUsers();\r\n    loadChatHistory();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const fetchAllUsers = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/users/all');\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch users:', error);\r\n    }\r\n  };\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      // Solo agregar el mensaje a la lista de mensajes privados si el destinatario no es el propio usuario\r\n      if (userData.username !== tab) {\r\n        let msgs = privateChats.get(tab) || [];\r\n        msgs.push(chatMessage);\r\n        setPrivateChats(new Map(privateChats.set(tab, msgs)));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const searchUsers = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/users/search`, {\r\n        params: { query: searchQuery }\r\n      });\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Error searching users:', error);\r\n    }\r\n  };\r\n\r\n  const loadChatHistory = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=ALL`);\r\n      const sortedMessages = response.data.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      setPublicChats(sortedMessages);\r\n    } catch (error) {\r\n      console.error('Error loading chat history:', error);\r\n    }\r\n  };\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        fetchAllUsers();\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n      case \"NEW_USER\":\r\n        fetchAllUsers();\r\n        break;\r\n      default:\r\n        setAllUsers([...allUsers, payloadData]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const sanitizeInput = (input) => {\r\n    return DOMPurify.sanitize(input);\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    const payloadData = JSON.parse(payload.body);\r\n\r\n    setPrivateChats(prevChats => {\r\n        const updatedChats = new Map(prevChats);\r\n        const currentMessages = updatedChats.get(payloadData.senderName) || [];\r\n\r\n        // Evitar agregar el mensaje dos veces si es enviado a uno mismo\r\n        if (payloadData.senderName !== userData.username || payloadData.receiverName !== userData.username) {\r\n            updatedChats.set(payloadData.senderName, [...currentMessages, payloadData]);\r\n        }\r\n        return updatedChats;\r\n    });\r\n\r\n    if (tab !== payloadData.senderName) {\r\n        setUnreadMessages(prevUnreadMessages => {\r\n            const newUnreadMessages = new Map(prevUnreadMessages);\r\n            const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n            newUnreadMessages.set(payloadData.senderName, count + 1);\r\n            return newUnreadMessages;\r\n        });\r\n    }\r\n};\r\n\r\n  const updateUserOnlineStatus = (username, online) => {\r\n    setAllUsers(prevUsers => prevUsers.map(user =>\r\n      user.username === username ? { ...user, online } : user\r\n    ));\r\n  };\r\n\r\n  const renderUserStatus = (user) => {\r\n    return user.online ? (\r\n      <span style={{ color: 'green' }}>Online</span>\r\n    ) : (\r\n      <span style={{ color: 'red' }}>Offline</span>\r\n    );\r\n  };\r\n\r\n  const renderUserList = () => {\r\n    return allUsers.map(user => (\r\n      <div key={user.username} style={{ margin: '10px 0' }}>\r\n        <span>{user.username}</span> {renderUserStatus(user)}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n\r\n    setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        newUnreadMessages.delete(name);\r\n        return newUnreadMessages;\r\n    });\r\n\r\n    if (name !== \"CHATROOM\") {\r\n        loadPrivateChatHistory(name);\r\n    }\r\n};\r\n\r\n  const handleSearch = (event) => {\r\n    const query = event.target.value;\r\n    setSearchQuery(query);\r\n    if (query.length > 0) {\r\n      searchUsers(query);\r\n    } else {\r\n      fetchAllUsers();\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    if (name === \"username\") {\r\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\r\n      setUserData({ ...userData, [name]: filteredValue });\r\n    } else {\r\n      setUserData({ ...userData, [name]: value });\r\n      const sanitizedValue = DOMPurify.sanitize(value);\r\n      setUserData({ ...userData, [name]: sanitizedValue });\r\n    }\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const validateUsername = (username) => {\r\n    const re = /^[a-zA-Z]+$/;\r\n    return re.test(username);\r\n  };\r\n\r\n  const validateFields = () => {\r\n    const errors = {};\r\n    if (!userData.username || !validateUsername(userData.username)) {\r\n      errors.username = \"El nombre de usuario solo puede contener letras\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    if (!userData.email || !validateEmail(userData.email)) {\r\n      errors.email = \"El email no es válido\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const registerUser = async () => {\r\n    const errors = validateFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n\r\n    const response = await axios.post('http://localhost:8080/api/users/register', {\r\n      username: userData.username,\r\n      password: userData.password,\r\n      email: userData.email\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      setUserData({ ...userData, connected: true, errors: {} });\r\n      connect();\r\n    }\r\n  }\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      if (tab === \"CHATROOM\") {\r\n        sendValue();\r\n      } else {\r\n        sendPrivateValue();\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      unreadMessages={unreadMessages}\r\n      allUsers={allUsers}\r\n      searchQuery={searchQuery}\r\n      isRegistering={isRegistering}\r\n      handleUsername={handleUsername}\r\n      setIsRegistering={setIsRegistering}\r\n      handleMessage={handleMessage}\r\n      handleTabChange={handleTabChange}\r\n      handleKeyDown={handleKeyDown}\r\n      setUserData={setUserData}\r\n      setSearchQuery={setSearchQuery}\r\n      sendPrivateValue={sendPrivateValue}\r\n      sendValue={sendValue}\r\n      registerUser={registerUser}\r\n      renderUserList={renderUserList}\r\n      handleSearch={handleSearch}\r\n      sanitizeInput={sanitizeInput}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n"]},"metadata":{},"sourceType":"module"}