{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\Distribuidas\\\\Distribuidas\\\\PARCIAL II\\\\PROYECTO\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\n/* \r\n//ESTE ESTA BIEN\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\nimport DOMPurify from 'dompurify';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n    errors: {}\r\n  });\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n      fetchAllUsers();\r\n      loadChatHistory();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  useEffect(() => {\r\n    if (tab !== \"CHATROOM\" && userData.connected) {\r\n      loadPrivateChatHistory(tab);\r\n    }\r\n  }, [tab]);\r\n\r\n  const loadPrivateChatHistory = async (receiverName) => {\r\n    if (receiverName === userData.username && tab === receiverName) {\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=${receiverName}`);\r\n      const sortedMessages = response.data\r\n        .filter(msg => msg.message.trim() !== '') // Filtrar mensajes vacíos\r\n        .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      const uniqueMessages = Array.from(new Map(sortedMessages.map(msg => [msg.id, msg])).values());\r\n  \r\n      setPrivateChats(prevChats => {\r\n        const updatedChats = new Map(prevChats);\r\n        updatedChats.set(receiverName, uniqueMessages);\r\n        return updatedChats;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading private chat history:', error);\r\n    }\r\n  };\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({ username: userData.username }, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n    fetchAllUsers();\r\n    loadChatHistory();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const fetchAllUsers = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/users/all');\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch users:', error);\r\n    }\r\n  };\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        let msgs = privateChats.get(tab) || [];\r\n        msgs.push(chatMessage);\r\n        setPrivateChats(new Map(privateChats.set(tab, msgs)));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const searchUsers = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/users/search`, {\r\n        params: { query: searchQuery }\r\n      });\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Error searching users:', error);\r\n    }\r\n  };\r\n\r\n  const loadChatHistory = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/chats/history');\r\n      const sortedMessages = response.data\r\n        .filter(msg => msg.message && msg.message.trim() !== '') \r\n        .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      setPublicChats(sortedMessages);\r\n    } catch (error) {\r\n      console.error('Error loading chat history:', error);\r\n    }\r\n  };\r\n  \r\n  const onMessageReceived = (payload) => {\r\n    const payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        fetchAllUsers();\r\n        break;\r\n      case \"MESSAGE\":\r\n        if (payloadData.message.trim() !== '') { \r\n          setPublicChats(prevPublicChats => [...prevPublicChats, payloadData]);\r\n        }\r\n        break;\r\n      case \"NEW_USER\":\r\n        fetchAllUsers();\r\n        break;\r\n      default:\r\n        setAllUsers(prevAllUsers => [...prevAllUsers, payloadData]);\r\n        break;\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  const sanitizeInput = (input) => {\r\n    return DOMPurify.sanitize(input);\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    const payloadData = JSON.parse(payload.body);\r\n  \r\n    if (payloadData.senderName === userData.username && tab === userData.username) {\r\n      return;\r\n    }\r\n  \r\n    if (payloadData.message.trim() === '') { \r\n      return;\r\n    }\r\n  \r\n    setPrivateChats(prevChats => {\r\n      const updatedChats = new Map(prevChats);\r\n      const currentMessages = updatedChats.get(payloadData.senderName) || [];\r\n      const isDuplicate = currentMessages.some(msg => msg.id === payloadData.id);\r\n      if (!isDuplicate) {\r\n        updatedChats.set(payloadData.senderName, [...currentMessages, payloadData]);\r\n      }\r\n      return updatedChats;\r\n    });\r\n  \r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  };\r\n  \r\n  const updateUserOnlineStatus = (username, online) => {\r\n    setAllUsers(prevUsers => prevUsers.map(user =>\r\n      user.username === username ? { ...user, online } : user\r\n    ));\r\n  };\r\n\r\n  const renderUserStatus = (user) => {\r\n    return user.online ? (\r\n      <span style={{ color: 'green' }}>Online</span>\r\n    ) : (\r\n      <span style={{ color: 'red' }}>Offline</span>\r\n    );\r\n  };\r\n\r\n  const renderUserList = () => {\r\n    return allUsers.map(user => (\r\n      <div key={user.username} style={{ margin: '10px 0' }}>\r\n        <span>{user.username}</span> {renderUserStatus(user)}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n\r\n    if (name !== \"CHATROOM\") {\r\n      loadPrivateChatHistory(name);\r\n    }\r\n  };\r\n\r\n  const handleSearch = (event) => {\r\n    const query = event.target.value;\r\n    setSearchQuery(query);\r\n    if (query.length > 0) {\r\n      searchUsers(query);\r\n    } else {\r\n      fetchAllUsers();\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n    const sendValue = () => {\r\n      if (stompClient) {\r\n        const chatMessage = {\r\n          senderName: userData.username,\r\n          message: userData.message,\r\n          status: \"MESSAGE\"\r\n        };\r\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n        setUserData(prevUserData => ({ ...prevUserData, message: \"\" }));\r\n      }\r\n    };\r\n    \r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    if (name === \"username\") {\r\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\r\n      setUserData({ ...userData, [name]: filteredValue });\r\n    } else {\r\n      setUserData({ ...userData, [name]: value });\r\n      const sanitizedValue = DOMPurify.sanitize(value);\r\n      setUserData({ ...userData, [name]: sanitizedValue });\r\n    }\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const validateUsername = (username) => {\r\n    const re = /^[a-zA-Z]+$/;\r\n    return re.test(username);\r\n  };\r\n\r\n  const validateFields = () => {\r\n    const errors = {};\r\n    if (!userData.username || !validateUsername(userData.username)) {\r\n      errors.username = \"El nombre de usuario solo puede contener letras\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    if (!userData.email || !validateEmail(userData.email)) {\r\n      errors.email = \"El email no es válido\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const registerUser = async () => {\r\n    const errors = validateFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const validateLoginFields = () => {\r\n    const errors = {};\r\n    if (!userData.username) {\r\n      errors.username = \"El nombre de usuario no puede estar vacío\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    return errors;\r\n  };\r\n  \r\n  const loginUser = async () => {\r\n    const errors = validateLoginFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true, errors: {} });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n      setUserData({ ...userData, errors: { ...errors, login: 'Nombre de usuario o contraseña incorrectos' } });\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    setUserData({ ...userData, connected: false });\r\n    stompClient.disconnect();\r\n    window.location.href = \"/login\";  \r\n  }\r\n  \r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n      allUsers={allUsers}\r\n      searchQuery={searchQuery}\r\n      setSearchQuery={setSearchQuery}\r\n      searchUsers={searchUsers}\r\n      renderUserStatus={searchUsers}\r\n      renderUserList={searchUsers}\r\n      logoutUser={handleLogout}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n\r\n*/\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport ChatRoomUI from './ChatRoomUI';\nimport axios from 'axios';\nimport DOMPurify from 'dompurify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\n  const [allUsers, setAllUsers] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [userData, setUserData] = useState({\n    username: '',\n    password: '',\n    email: '',\n    receivername: '',\n    connected: false,\n    message: '',\n    errors: {}\n  });\n  const [isRegistering, setIsRegistering] = useState(false);\n  useEffect(() => {\n    if (userData.connected) {\n      connect();\n      fetchAllUsers();\n      loadChatHistory();\n    }\n  }, [userData.connected]);\n  useEffect(() => {\n    if (userData.connected && !publicChats.length) {\n      loadChatHistory();\n    }\n  }, [userData.connected]);\n  useEffect(() => {\n    if (tab !== \"CHATROOM\" && userData.connected) {\n      loadPrivateChatHistory(tab);\n    }\n  }, [tab]);\n  useEffect(() => {\n    window.addEventListener('beforeunload', () => {\n      if (userData.connected) {\n        stompClient.disconnect(() => {\n          axios.post(\"/api/users/disconnect\", {\n            username: userData.username\n          });\n        });\n      }\n    });\n  }, [userData.connected, stompClient]);\n  useEffect(() => {\n    window.addEventListener('unload', () => {\n      if (userData.connected) {\n        stompClient.disconnect(() => {\n          axios.post(\"/api/users/disconnect\", {\n            username: userData.username\n          });\n        });\n      }\n    });\n  }, [userData.connected, stompClient]);\n  useEffect(() => {\n    window.addEventListener('pagehide', () => {\n      if (userData.connected) {\n        stompClient.disconnect(() => {\n          axios.post(\"/api/users/disconnect\", {\n            username: userData.username\n          });\n        });\n      }\n    });\n  }, [userData.connected, stompClient]);\n\n  const loadPrivateChatHistory = async receiverName => {\n    if (receiverName === userData.username) {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=${userData.username}`);\n        const sortedMessages = response.data.filter(msg => msg.message.trim() !== '') // Filtrar mensajes vacíos\n        .sort((a, b) => new Date(a.date) - new Date(b.date));\n        setPrivateChats(prevChats => {\n          const updatedChats = new Map(prevChats);\n          const currentMessages = updatedChats.get(userData.username) || [];\n          const newMessages = sortedMessages.filter(msg => !currentMessages.find(m => m.id === msg.id));\n          updatedChats.set(userData.username, [...currentMessages, ...newMessages]);\n          return updatedChats;\n        });\n      } catch (error) {\n        console.error('Error loading private chat history:', error);\n      }\n    } else {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=${receiverName}`);\n        const sortedMessages = response.data.filter(msg => msg.message.trim() !== '') // Filtrar mensajes vacíos\n        .sort((a, b) => new Date(a.date) - new Date(b.date));\n        setPrivateChats(prevChats => {\n          const updatedChats = new Map(prevChats);\n          const currentMessages = updatedChats.get(receiverName) || [];\n          const newMessages = sortedMessages.filter(msg => !currentMessages.find(m => m.id === msg.id));\n          updatedChats.set(receiverName, [...currentMessages, ...newMessages]);\n          return updatedChats;\n        });\n      } catch (error) {\n        console.error('Error loading private chat history:', error);\n      }\n    }\n  };\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({\n      username: userData.username\n    }, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n    fetchAllUsers();\n    loadChatHistory();\n    updateUserStatus(userData.username, true);\n  };\n\n  const updateUserStatus = async (username, isOnline) => {\n    try {\n      await axios.post('http://localhost:8080/api/users/status', {\n        username,\n        isOnline\n      });\n      setAllUsers(prevUsers => prevUsers.map(user => user.username === username ? { ...user,\n        online: isOnline\n      } : user));\n    } catch (error) {\n      console.error('Error updating user status:', error);\n    }\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const fetchAllUsers = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/users/all');\n      setAllUsers(response.data.map(user => ({ ...user,\n        isConnected: user.online\n      })));\n    } catch (error) {\n      console.error('Failed to fetch users:', error);\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        if (!privateChats.get(tab).find(msg => msg.id === chatMessage.id)) {\n          let msgs = privateChats.get(tab) || [];\n          msgs.push(chatMessage);\n          setPrivateChats(new Map(privateChats.set(tab, msgs)));\n        }\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        message: \"\"\n      });\n    }\n  };\n\n  const searchUsers = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8080/api/users/search`, {\n        params: {\n          query: searchQuery\n        }\n      });\n      setAllUsers(response.data);\n    } catch (error) {\n      console.error('Error searching users:', error);\n    }\n  };\n\n  const loadChatHistory = async () => {\n    if (!userData.connected) {\n      return;\n    }\n\n    try {\n      const response = await axios.get('http://localhost:8080/api/chats/history');\n      const sortedMessages = response.data.filter(msg => msg.message !== null && msg.message.trim() !== '') // Agregar condición para verificar si msg.message es null\n      .sort((a, b) => new Date(a.date) - new Date(b.date));\n      console.log(sortedMessages);\n      setPublicChats(sortedMessages);\n    } catch (error) {\n      console.error('Error loading chat history:', error);\n    }\n  };\n\n  const onMessageReceived = payload => {\n    const payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      /* case \"USER_DISCONNECTED\":\r\n       if (!allUsers.find((user) => user.username === payloadData.username && user.isConnected)) {\r\n         setPublicChats((prevChats) => [...prevChats, payloadData]);\r\n         handleUserDisconnect(payloadData.username);\r\n       }\r\n       break;*/\n      case \"USER_DISCONNECTED\":\n        setAllUsers(prevUsers => prevUsers.map(user => {\n          if (user.username === payloadData.username) {\n            return { ...user,\n              isConnected: false\n            };\n          }\n\n          return user;\n        }));\n        break;\n\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        fetchAllUsers();\n        break;\n\n      /*case \"MESSAGE\":\r\n              if (payloadData.message.trim() !== '') { \r\n                setPublicChats(prevPublicChats => [...prevPublicChats, payloadData]);\r\n              }\r\n              break;*/\n\n      case \"MESSAGE\":\n        if (payloadData.message.trim() !== '') {\n          if (payloadData.receiverName === \"CHATROOM\" && payloadData.senderName !== userData.username) {\n            if (!publicChats.find(msg => msg.id === payloadData.id)) {\n              setPublicChats(prevPublicChats => [...prevPublicChats, payloadData]);\n            } // Add notification here\n\n\n            if (!publicChats.find(msg => msg.id === payloadData.id)) {\n              setUnreadMessages(prevUnreadMessages => {\n                const newUnreadMessages = new Map(prevUnreadMessages);\n                const count = newUnreadMessages.get(\"CHATROOM\") || 0;\n                newUnreadMessages.set(\"CHATROOM\", count + 1);\n                return newUnreadMessages;\n              });\n            }\n          } else if (payloadData.senderName !== userData.username || payloadData.receiverName !== userData.username) {\n            var _privateChats$get, _privateChats$get2;\n\n            // Only process private messages that are not from yourself to yourself\n            if (!((_privateChats$get = privateChats.get(payloadData.senderName)) !== null && _privateChats$get !== void 0 && _privateChats$get.find(msg => msg.id === payloadData.id))) {\n              setPrivateChats(prevChats => {\n                const updatedChats = new Map(prevChats);\n                const currentMessages = updatedChats.get(payloadData.senderName) || [];\n                currentMessages.push(payloadData);\n                updatedChats.set(payloadData.senderName, currentMessages);\n                return updatedChats;\n              });\n            } // Add notification here\n\n\n            if (payloadData.senderName !== userData.username && !((_privateChats$get2 = privateChats.get(payloadData.senderName)) !== null && _privateChats$get2 !== void 0 && _privateChats$get2.find(msg => msg.id === payloadData.id))) {\n              setUnreadMessages(prevUnreadMessages => {\n                const newUnreadMessages = new Map(prevUnreadMessages);\n                const count = newUnreadMessages.get(payloadData.senderName) || 0;\n                newUnreadMessages.set(payloadData.senderName, count + 1);\n                return newUnreadMessages;\n              });\n            }\n          }\n        }\n\n        break;\n\n      case \"NEW_USER\":\n        fetchAllUsers();\n        break;\n\n      default:\n        setAllUsers(prevAllUsers => [...prevAllUsers, payloadData]);\n        break;\n    }\n  };\n\n  const sanitizeInput = input => {\n    return DOMPurify.sanitize(input);\n  };\n\n  const onPrivateMessage = payload => {\n    const payloadData = JSON.parse(payload.body);\n\n    if (payloadData.senderName === userData.username && payloadData.receiverName === userData.username) {\n      // Ignore messages sent from yourself to yourself\n      return;\n    }\n\n    if (payloadData.message.trim() === '') {\n      return;\n    }\n\n    setPrivateChats(prevChats => {\n      const updatedChats = new Map(prevChats);\n      const currentMessages = updatedChats.get(payloadData.senderName) || [];\n      const isDuplicate = currentMessages.some(msg => msg.id === payloadData.id);\n\n      if (!isDuplicate) {\n        updatedChats.set(payloadData.senderName, [...currentMessages, payloadData]);\n      }\n\n      return updatedChats;\n    });\n\n    if (tab !== payloadData.senderName) {\n      setUnreadMessages(prevUnreadMessages => {\n        const newUnreadMessages = new Map(prevUnreadMessages);\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\n        newUnreadMessages.set(payloadData.senderName, count + 1);\n        return newUnreadMessages;\n      });\n    }\n  };\n\n  const updateUserOnlineStatus = (username, online) => {\n    setAllUsers(prevUsers => prevUsers.map(user => user.username === username ? { ...user,\n      online\n    } : user));\n  };\n  /*\r\n    const handleTabChange = (name) => {\r\n      setTab(name);\r\n  \r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        newUnreadMessages.delete(name);\r\n        return newUnreadMessages;\r\n      });\r\n  \r\n      if (name !== \"CHATROOM\") {\r\n        loadPrivateChatHistory(name);\r\n      }\r\n    };*/\n\n\n  const handleTabChange = name => {\n    setTab(name);\n\n    if (name === \"CHATROOM\") {\n      setUnreadMessages(prevUnreadMessages => {\n        const newUnreadMessages = new Map(prevUnreadMessages);\n        newUnreadMessages.delete(\"CHATROOM\");\n        return newUnreadMessages;\n      });\n    } else {\n      setUnreadMessages(prevUnreadMessages => {\n        const newUnreadMessages = new Map(prevUnreadMessages);\n        newUnreadMessages.delete(name);\n        return newUnreadMessages;\n      });\n    }\n  };\n\n  const handleSearch = event => {\n    const query = event.target.value;\n    setSearchQuery(query);\n\n    if (query.length > 0) {\n      searchUsers(query);\n    } else {\n      fetchAllUsers();\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      message: value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      const chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData(prevUserData => ({ ...prevUserData,\n        message: \"\"\n      }));\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      name,\n      value\n    } = event.target;\n\n    if (name === \"username\") {\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\n      setUserData({ ...userData,\n        [name]: filteredValue\n      });\n    } else {\n      setUserData({ ...userData,\n        [name]: value\n      });\n      const sanitizedValue = DOMPurify.sanitize(value);\n      setUserData({ ...userData,\n        [name]: sanitizedValue\n      });\n    }\n  };\n\n  const validateEmail = email => {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(String(email).toLowerCase());\n  };\n\n  const validateUsername = username => {\n    const re = /^[a-zA-Z]+$/;\n    return re.test(username);\n  };\n\n  const validateFields = () => {\n    const errors = {};\n\n    if (!userData.username || !validateUsername(userData.username)) {\n      errors.username = \"El nombre de usuario solo puede contener letras\";\n    }\n\n    if (!userData.password) {\n      errors.password = \"La contraseña no puede estar vacía\";\n    }\n\n    if (!userData.email || !validateEmail(userData.email)) {\n      errors.email = \"El email no es válido\";\n    }\n\n    return errors;\n  };\n\n  const registerUser = async () => {\n    const errors = validateFields();\n\n    if (Object.keys(errors).length > 0) {\n      setUserData({ ...userData,\n        errors\n      });\n      return;\n    }\n\n    try {\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\n        username: userData.username,\n        password: userData.password,\n        email: userData.email\n      });\n      console.log(response.data);\n      setIsRegistering(false);\n    } catch (error) {\n      console.error('Registration failed:', error.response.data);\n    }\n  };\n\n  const validateLoginFields = () => {\n    const errors = {};\n\n    if (!userData.username) {\n      errors.username = \"El nombre de usuario no puede estar vacío\";\n    }\n\n    if (!userData.password) {\n      errors.password = \"La contraseña no puede estar vacía\";\n    }\n\n    return errors;\n  };\n\n  const loginUser = async () => {\n    const errors = validateLoginFields();\n\n    if (Object.keys(errors).length > 0) {\n      setUserData({ ...userData,\n        errors\n      });\n      return;\n    }\n\n    try {\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\n        username: userData.username.toLowerCase(),\n        password: userData.password\n      });\n      console.log(response.data);\n      setUserData({ ...userData,\n        connected: true,\n        errors: {}\n      });\n    } catch (error) {\n      console.error('Login failed:', error.response.data);\n      setUserData({ ...userData,\n        errors: { ...errors,\n          login: 'Nombre de usuario o contraseña incorrectos'\n        }\n      });\n    }\n  };\n  /*\r\n    const handleLogout = () => {\r\n      stompClient.disconnect(() => {\r\n          axios.post(\"/api/users/disconnect\", { username: userData.username })\r\n            .then(() => {\r\n                  window.location.href = \"/login\";\r\n              })\r\n            .catch((error) => {\r\n                  console.error(error);\r\n              });\r\n      });\r\n  };*/\n\n\n  const handleLogout = () => {\n    stompClient.disconnect(() => {\n      axios.post(\"/api/users/disconnect\", {\n        username: userData.username\n      }).then(() => {\n        handleUserDisconnect(userData.username); // Llamar a handleUserDisconnect\n\n        window.location.href = \"/login\";\n      }).catch(error => {\n        console.error(error);\n      });\n    });\n  };\n\n  const handleUserDisconnect = username => {\n    setAllUsers(prevUsers => prevUsers.filter(user => user.username !== username));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatRoomUI, {\n    userData: userData,\n    privateChats: privateChats,\n    publicChats: publicChats,\n    tab: tab,\n    setTab: handleTabChange,\n    handleMessage: handleMessage,\n    sendValue: sendValue,\n    sendPrivateValue: sendPrivateValue,\n    handleUsername: handleUsername,\n    registerUser: registerUser,\n    loginUser: loginUser,\n    unreadMessages: unreadMessages,\n    isRegistering: isRegistering,\n    setIsRegistering: setIsRegistering,\n    allUsers: allUsers,\n    searchQuery: searchQuery,\n    setSearchQuery: setSearchQuery,\n    searchUsers: searchUsers,\n    logoutUser: handleLogout,\n    act: handleUserDisconnect\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 899,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"5Cj2MNVUxmm0k++HF48KtnHVLRU=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/Distribuidas/Distribuidas/PARCIAL II/PROYECTO/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","SockJS","ChatRoomUI","axios","DOMPurify","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","unreadMessages","setUnreadMessages","allUsers","setAllUsers","searchQuery","setSearchQuery","userData","setUserData","username","password","email","receivername","connected","message","errors","isRegistering","setIsRegistering","connect","fetchAllUsers","loadChatHistory","length","loadPrivateChatHistory","window","addEventListener","disconnect","post","receiverName","response","get","sortedMessages","data","filter","msg","trim","sort","a","b","Date","date","prevChats","updatedChats","currentMessages","newMessages","find","m","id","set","error","console","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","updateUserStatus","isOnline","prevUsers","map","user","online","chatMessage","senderName","status","send","JSON","stringify","isConnected","sendPrivateValue","msgs","push","searchUsers","params","query","log","payload","payloadData","parse","body","prevPublicChats","prevUnreadMessages","newUnreadMessages","count","prevAllUsers","sanitizeInput","input","sanitize","isDuplicate","some","updateUserOnlineStatus","handleTabChange","name","delete","handleSearch","event","target","value","err","handleMessage","sendValue","prevUserData","handleUsername","filteredValue","replace","sanitizedValue","validateEmail","re","test","String","toLowerCase","validateUsername","validateFields","registerUser","Object","keys","validateLoginFields","loginUser","login","handleLogout","then","handleUserDisconnect","location","href","catch"],"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","sourcesContent":["/* \r\n//ESTE ESTA BIEN\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\nimport DOMPurify from 'dompurify';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n    errors: {}\r\n  });\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n      fetchAllUsers();\r\n      loadChatHistory();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  useEffect(() => {\r\n    if (tab !== \"CHATROOM\" && userData.connected) {\r\n      loadPrivateChatHistory(tab);\r\n    }\r\n  }, [tab]);\r\n\r\n  const loadPrivateChatHistory = async (receiverName) => {\r\n    if (receiverName === userData.username && tab === receiverName) {\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=${receiverName}`);\r\n      const sortedMessages = response.data\r\n        .filter(msg => msg.message.trim() !== '') // Filtrar mensajes vacíos\r\n        .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      const uniqueMessages = Array.from(new Map(sortedMessages.map(msg => [msg.id, msg])).values());\r\n  \r\n      setPrivateChats(prevChats => {\r\n        const updatedChats = new Map(prevChats);\r\n        updatedChats.set(receiverName, uniqueMessages);\r\n        return updatedChats;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading private chat history:', error);\r\n    }\r\n  };\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({ username: userData.username }, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n    fetchAllUsers();\r\n    loadChatHistory();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const fetchAllUsers = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/users/all');\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch users:', error);\r\n    }\r\n  };\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        let msgs = privateChats.get(tab) || [];\r\n        msgs.push(chatMessage);\r\n        setPrivateChats(new Map(privateChats.set(tab, msgs)));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const searchUsers = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/users/search`, {\r\n        params: { query: searchQuery }\r\n      });\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Error searching users:', error);\r\n    }\r\n  };\r\n\r\n  const loadChatHistory = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/chats/history');\r\n      const sortedMessages = response.data\r\n        .filter(msg => msg.message && msg.message.trim() !== '') \r\n        .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      setPublicChats(sortedMessages);\r\n    } catch (error) {\r\n      console.error('Error loading chat history:', error);\r\n    }\r\n  };\r\n  \r\n  const onMessageReceived = (payload) => {\r\n    const payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        fetchAllUsers();\r\n        break;\r\n      case \"MESSAGE\":\r\n        if (payloadData.message.trim() !== '') { \r\n          setPublicChats(prevPublicChats => [...prevPublicChats, payloadData]);\r\n        }\r\n        break;\r\n      case \"NEW_USER\":\r\n        fetchAllUsers();\r\n        break;\r\n      default:\r\n        setAllUsers(prevAllUsers => [...prevAllUsers, payloadData]);\r\n        break;\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  const sanitizeInput = (input) => {\r\n    return DOMPurify.sanitize(input);\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    const payloadData = JSON.parse(payload.body);\r\n  \r\n    if (payloadData.senderName === userData.username && tab === userData.username) {\r\n      return;\r\n    }\r\n  \r\n    if (payloadData.message.trim() === '') { \r\n      return;\r\n    }\r\n  \r\n    setPrivateChats(prevChats => {\r\n      const updatedChats = new Map(prevChats);\r\n      const currentMessages = updatedChats.get(payloadData.senderName) || [];\r\n      const isDuplicate = currentMessages.some(msg => msg.id === payloadData.id);\r\n      if (!isDuplicate) {\r\n        updatedChats.set(payloadData.senderName, [...currentMessages, payloadData]);\r\n      }\r\n      return updatedChats;\r\n    });\r\n  \r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  };\r\n  \r\n  const updateUserOnlineStatus = (username, online) => {\r\n    setAllUsers(prevUsers => prevUsers.map(user =>\r\n      user.username === username ? { ...user, online } : user\r\n    ));\r\n  };\r\n\r\n  const renderUserStatus = (user) => {\r\n    return user.online ? (\r\n      <span style={{ color: 'green' }}>Online</span>\r\n    ) : (\r\n      <span style={{ color: 'red' }}>Offline</span>\r\n    );\r\n  };\r\n\r\n  const renderUserList = () => {\r\n    return allUsers.map(user => (\r\n      <div key={user.username} style={{ margin: '10px 0' }}>\r\n        <span>{user.username}</span> {renderUserStatus(user)}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n\r\n    if (name !== \"CHATROOM\") {\r\n      loadPrivateChatHistory(name);\r\n    }\r\n  };\r\n\r\n  const handleSearch = (event) => {\r\n    const query = event.target.value;\r\n    setSearchQuery(query);\r\n    if (query.length > 0) {\r\n      searchUsers(query);\r\n    } else {\r\n      fetchAllUsers();\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n    const sendValue = () => {\r\n      if (stompClient) {\r\n        const chatMessage = {\r\n          senderName: userData.username,\r\n          message: userData.message,\r\n          status: \"MESSAGE\"\r\n        };\r\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n        setUserData(prevUserData => ({ ...prevUserData, message: \"\" }));\r\n      }\r\n    };\r\n    \r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    if (name === \"username\") {\r\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\r\n      setUserData({ ...userData, [name]: filteredValue });\r\n    } else {\r\n      setUserData({ ...userData, [name]: value });\r\n      const sanitizedValue = DOMPurify.sanitize(value);\r\n      setUserData({ ...userData, [name]: sanitizedValue });\r\n    }\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const validateUsername = (username) => {\r\n    const re = /^[a-zA-Z]+$/;\r\n    return re.test(username);\r\n  };\r\n\r\n  const validateFields = () => {\r\n    const errors = {};\r\n    if (!userData.username || !validateUsername(userData.username)) {\r\n      errors.username = \"El nombre de usuario solo puede contener letras\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    if (!userData.email || !validateEmail(userData.email)) {\r\n      errors.email = \"El email no es válido\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const registerUser = async () => {\r\n    const errors = validateFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const validateLoginFields = () => {\r\n    const errors = {};\r\n    if (!userData.username) {\r\n      errors.username = \"El nombre de usuario no puede estar vacío\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    return errors;\r\n  };\r\n  \r\n  const loginUser = async () => {\r\n    const errors = validateLoginFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true, errors: {} });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n      setUserData({ ...userData, errors: { ...errors, login: 'Nombre de usuario o contraseña incorrectos' } });\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    setUserData({ ...userData, connected: false });\r\n    stompClient.disconnect();\r\n    window.location.href = \"/login\";  \r\n  }\r\n  \r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n      allUsers={allUsers}\r\n      searchQuery={searchQuery}\r\n      setSearchQuery={setSearchQuery}\r\n      searchUsers={searchUsers}\r\n      renderUserStatus={searchUsers}\r\n      renderUserList={searchUsers}\r\n      logoutUser={handleLogout}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n\r\n*/\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\nimport DOMPurify from 'dompurify';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n    errors: {}\r\n  });\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n      fetchAllUsers();\r\n      loadChatHistory();\r\n      \r\n    }\r\n  }, [userData.connected]);\r\n  useEffect(() => {\r\n    if (userData.connected &&!publicChats.length) {\r\n      loadChatHistory();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  useEffect(() => {\r\n    if (tab !== \"CHATROOM\" && userData.connected) {\r\n      loadPrivateChatHistory(tab);\r\n    }\r\n  }, [tab]);\r\n  useEffect(() => {\r\n    window.addEventListener('beforeunload', () => {\r\n      if (userData.connected) {\r\n        stompClient.disconnect(() => {\r\n          axios.post(\"/api/users/disconnect\", { username: userData.username });\r\n        });\r\n      }\r\n    });\r\n  }, [userData.connected, stompClient]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('unload', () => {\r\n      if (userData.connected) {\r\n        stompClient.disconnect(() => {\r\n          axios.post(\"/api/users/disconnect\", { username: userData.username });\r\n        });\r\n      }\r\n    });\r\n  }, [userData.connected, stompClient]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('pagehide', () => {\r\n      if (userData.connected) {\r\n        stompClient.disconnect(() => {\r\n          axios.post(\"/api/users/disconnect\", { username: userData.username });\r\n        });\r\n      }\r\n    });\r\n  }, [userData.connected, stompClient]);\r\n\r\n  \r\n\r\n  const loadPrivateChatHistory = async (receiverName) => {\r\n    if (receiverName === userData.username) {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=${userData.username}`);\r\n        const sortedMessages = response.data\r\n    .filter(msg => msg.message.trim()!== '') // Filtrar mensajes vacíos\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    \r\n        setPrivateChats(prevChats => {\r\n          const updatedChats = new Map(prevChats);\r\n          const currentMessages = updatedChats.get(userData.username) || [];\r\n          const newMessages = sortedMessages.filter(msg =>!currentMessages.find(m => m.id === msg.id));\r\n          updatedChats.set(userData.username, [...currentMessages,...newMessages]);\r\n          return updatedChats;\r\n        });\r\n      } catch (error) {\r\n        console.error('Error loading private chat history:', error);\r\n      }\r\n    } else {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/api/chat/history?senderName=${userData.username}&receiverName=${receiverName}`);\r\n        const sortedMessages = response.data\r\n    .filter(msg => msg.message.trim()!== '') // Filtrar mensajes vacíos\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    \r\n        setPrivateChats(prevChats => {\r\n          const updatedChats = new Map(prevChats);\r\n          const currentMessages = updatedChats.get(receiverName) || [];\r\n          const newMessages = sortedMessages.filter(msg =>!currentMessages.find(m => m.id === msg.id));\r\n          updatedChats.set(receiverName, [...currentMessages,...newMessages]);\r\n          return updatedChats;\r\n        });\r\n      } catch (error) {\r\n        console.error('Error loading private chat history:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({ username: userData.username }, onConnected, onError);\r\n  }\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n    fetchAllUsers();\r\n    loadChatHistory();\r\n    updateUserStatus(userData.username, true);\r\n  }\r\n\r\nconst updateUserStatus = async (username, isOnline) => {\r\n  try {\r\n    await axios.post('http://localhost:8080/api/users/status', { username, isOnline });\r\n    setAllUsers(prevUsers => prevUsers.map(user =>\r\n      user.username === username ? { ...user, online: isOnline } : user\r\n    ));\r\n  } catch (error) {\r\n    console.error('Error updating user status:', error);\r\n  }\r\n};\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const fetchAllUsers = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/users/all');\r\n      setAllUsers(response.data.map((user) => ({...user, isConnected: user.online })));\r\n    } catch (error) {\r\n      console.error('Failed to fetch users:', error);\r\n    }\r\n  };\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n  \r\n      if (userData.username!== tab) {\r\n        if (!privateChats.get(tab).find(msg => msg.id === chatMessage.id)) {\r\n          let msgs = privateChats.get(tab) || [];\r\n          msgs.push(chatMessage);\r\n          setPrivateChats(new Map(privateChats.set(tab, msgs)));\r\n        }\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const searchUsers = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/users/search`, {\r\n        params: { query: searchQuery }\r\n      });\r\n      setAllUsers(response.data);\r\n    } catch (error) {\r\n      console.error('Error searching users:', error);\r\n    }\r\n  };\r\n\r\n  const loadChatHistory = async () => {\r\n    if (!userData.connected) {\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/chats/history');\r\n      const sortedMessages = response.data\r\n       .filter(msg => msg.message!== null && msg.message.trim()!== '') // Agregar condición para verificar si msg.message es null\r\n       .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      console.log(sortedMessages);\r\n      setPublicChats(sortedMessages);\r\n    } catch (error) {\r\n      console.error('Error loading chat history:', error);\r\n    }\r\n  };\r\n  \r\n  const onMessageReceived = (payload) => {\r\n    const payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n     /* case \"USER_DISCONNECTED\":\r\n      if (!allUsers.find((user) => user.username === payloadData.username && user.isConnected)) {\r\n        setPublicChats((prevChats) => [...prevChats, payloadData]);\r\n        handleUserDisconnect(payloadData.username);\r\n      }\r\n      break;*/\r\n      \r\n      case \"USER_DISCONNECTED\":\r\n        setAllUsers((prevUsers) => prevUsers.map((user) => {\r\n          if (user.username === payloadData.username) {\r\n            return {...user, isConnected: false };\r\n          }\r\n          return user;\r\n        }));\r\n        break;\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        fetchAllUsers();\r\n        break;\r\n/*case \"MESSAGE\":\r\n        if (payloadData.message.trim() !== '') { \r\n          setPublicChats(prevPublicChats => [...prevPublicChats, payloadData]);\r\n        }\r\n        break;*/\r\n        case \"MESSAGE\":\r\n        if (payloadData.message.trim() !== '') {\r\n          if (payloadData.receiverName === \"CHATROOM\" && payloadData.senderName !== userData.username) {\r\n            if (!publicChats.find(msg => msg.id === payloadData.id)) {\r\n              setPublicChats(prevPublicChats => [...prevPublicChats, payloadData]);\r\n            }\r\n            // Add notification here\r\n            if (!publicChats.find(msg => msg.id === payloadData.id)) {\r\n              setUnreadMessages(prevUnreadMessages => {\r\n                const newUnreadMessages = new Map(prevUnreadMessages);\r\n                const count = newUnreadMessages.get(\"CHATROOM\") || 0;\r\n                newUnreadMessages.set(\"CHATROOM\", count + 1);\r\n                return newUnreadMessages;\r\n              });\r\n            }\r\n          } else if (payloadData.senderName !== userData.username || payloadData.receiverName !== userData.username) {\r\n            // Only process private messages that are not from yourself to yourself\r\n            if (!privateChats.get(payloadData.senderName)?.find(msg => msg.id === payloadData.id)) {\r\n              setPrivateChats(prevChats => {\r\n                const updatedChats = new Map(prevChats);\r\n                const currentMessages = updatedChats.get(payloadData.senderName) || [];\r\n                currentMessages.push(payloadData);\r\n                updatedChats.set(payloadData.senderName, currentMessages);\r\n                return updatedChats;\r\n              });\r\n            }\r\n            // Add notification here\r\n            if (payloadData.senderName !== userData.username && !privateChats.get(payloadData.senderName)?.find(msg => msg.id === payloadData.id)) {\r\n              setUnreadMessages(prevUnreadMessages => {\r\n                const newUnreadMessages = new Map(prevUnreadMessages);\r\n                const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n                newUnreadMessages.set(payloadData.senderName, count + 1);\r\n                return newUnreadMessages;\r\n              });\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"NEW_USER\":\r\n        fetchAllUsers();\r\n        break;\r\n      default:\r\n        setAllUsers(prevAllUsers => [...prevAllUsers, payloadData]);\r\n        break;\r\n    }\r\n  };\r\n \r\n  const sanitizeInput = (input) => {\r\n    return DOMPurify.sanitize(input);\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    const payloadData = JSON.parse(payload.body);\r\n  \r\n    if (payloadData.senderName === userData.username && payloadData.receiverName === userData.username) {\r\n      // Ignore messages sent from yourself to yourself\r\n      return;\r\n    }\r\n  \r\n    if (payloadData.message.trim() === '') { \r\n      return;\r\n    }\r\n  \r\n    setPrivateChats(prevChats => {\r\n      const updatedChats = new Map(prevChats);\r\n      const currentMessages = updatedChats.get(payloadData.senderName) || [];\r\n      const isDuplicate = currentMessages.some(msg => msg.id === payloadData.id);\r\n      if (!isDuplicate) {\r\n        updatedChats.set(payloadData.senderName, [...currentMessages, payloadData]);\r\n      }\r\n      return updatedChats;\r\n    });\r\n  \r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateUserOnlineStatus = (username, online) => {\r\n    setAllUsers(prevUsers => prevUsers.map(user =>\r\n      user.username === username ? { ...user, online } : user\r\n    ));\r\n  };\r\n\r\n/*\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n\r\n    if (name !== \"CHATROOM\") {\r\n      loadPrivateChatHistory(name);\r\n    }\r\n  };*/\r\n  const handleTabChange = (name) => {\r\n  setTab(name);\r\n  if (name === \"CHATROOM\") {\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(\"CHATROOM\");\r\n      return newUnreadMessages;\r\n    });\r\n  } else {\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n  }\r\n};\r\n\r\n  const handleSearch = (event) => {\r\n    const query = event.target.value;\r\n    setSearchQuery(query);\r\n    if (query.length > 0) {\r\n      searchUsers(query);\r\n    } else {\r\n      fetchAllUsers();\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n    const sendValue = () => {\r\n      if (stompClient) {\r\n        const chatMessage = {\r\n          senderName: userData.username,\r\n          message: userData.message,\r\n          status: \"MESSAGE\"\r\n        };\r\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n        setUserData(prevUserData => ({ ...prevUserData, message: \"\" }));\r\n      }\r\n    };\r\n    \r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    if (name === \"username\") {\r\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\r\n      setUserData({ ...userData, [name]: filteredValue });\r\n    } else {\r\n      setUserData({ ...userData, [name]: value });\r\n      const sanitizedValue = DOMPurify.sanitize(value);\r\n      setUserData({ ...userData, [name]: sanitizedValue });\r\n    }\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const validateUsername = (username) => {\r\n    const re = /^[a-zA-Z]+$/;\r\n    return re.test(username);\r\n  };\r\n\r\n  const validateFields = () => {\r\n    const errors = {};\r\n    if (!userData.username || !validateUsername(userData.username)) {\r\n      errors.username = \"El nombre de usuario solo puede contener letras\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    if (!userData.email || !validateEmail(userData.email)) {\r\n      errors.email = \"El email no es válido\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const registerUser = async () => {\r\n    const errors = validateFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const validateLoginFields = () => {\r\n    const errors = {};\r\n    if (!userData.username) {\r\n      errors.username = \"El nombre de usuario no puede estar vacío\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    return errors;\r\n  };\r\n  \r\n  const loginUser = async () => {\r\n    const errors = validateLoginFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username.toLowerCase(),\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true, errors: {} });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n      setUserData({ ...userData, errors: { ...errors, login: 'Nombre de usuario o contraseña incorrectos' } });\r\n    }\r\n  };\r\n/*\r\n  const handleLogout = () => {\r\n    stompClient.disconnect(() => {\r\n        axios.post(\"/api/users/disconnect\", { username: userData.username })\r\n          .then(() => {\r\n                window.location.href = \"/login\";\r\n            })\r\n          .catch((error) => {\r\n                console.error(error);\r\n            });\r\n    });\r\n};*/\r\n\r\n\r\nconst handleLogout = () => {\r\n  stompClient.disconnect(() => {\r\n    axios.post(\"/api/users/disconnect\", { username: userData.username })\r\n     .then(() => {\r\n        handleUserDisconnect(userData.username); // Llamar a handleUserDisconnect\r\n        window.location.href = \"/login\";\r\n      })\r\n     .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  });\r\n};\r\n\r\nconst handleUserDisconnect = (username) => {\r\n  setAllUsers((prevUsers) => prevUsers.filter((user) => user.username!== username));\r\n};\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n      allUsers={allUsers}\r\n      searchQuery={searchQuery}\r\n      setSearchQuery={setSearchQuery}\r\n      searchUsers={searchUsers}\r\n      logoutUser={handleLogout}\r\n      act={handleUserDisconnect}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}