{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\Distribuidas\\\\Distribuidas\\\\PARCIAL II\\\\PROYECTO\\\\react-client\\\\src\\\\components\\\\ChatRoomUI.js\",\n    _s = $RefreshSig$();\n\n/*\r\n//este esta bien\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser\r\n}) => {\r\n\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        sendValue();\r\n      } else {\r\n        sendPrivateValue();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n\r\n            </div>\r\n            \r\n            <ul>\r\n              <li\r\n                onClick={() => setTab(\"CHATROOM\")}\r\n                className={`member ${tab === \"CHATROOM\" ? \"active\" : \"\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {filteredUsers.map((user, index) => (\r\n                <li\r\n                  onClick={() => setTab(user.username)}\r\n                  className={`member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"}`}\r\n                  key={index}\r\n                >\r\n                  {user.username} {unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : ''}\r\n                  {user.username === userData.username && <span className=\"current-user-indicator\">(Tú)</span>}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          \r\n\r\n          <div className=\"chat-content\">\r\n            \r\n            <header className=\"chat-header\">\r\n              \r\n              {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n            </header>\r\n            \r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={tab === \"CHATROOM\" ? sendValue : sendPrivateValue}>Enviar</button>\r\n            </div>\r\n\r\n          </div>\r\n          \r\n          <div className='contenedor'>\r\n          <button className=\"logout-button\" onClick={logoutUser}>Cerrar sesión</button>\r\n            </div>\r\n        </div>\r\n        \r\n      ) : (\r\n        \r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI; \r\n*/\n\n/*\r\n//este tiene inactivo \r\nimport React, { useEffect, useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser\r\n}) => {\r\n\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        sendValue();\r\n      } else {\r\n        sendPrivateValue();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n\r\n  const renderUserStatus = (user) => {\r\n    return user.online ? (\r\n      <span className=\"status-indicator online\">Active</span>\r\n    ) : (\r\n      <span className=\"status-indicator offline\">Inactive</span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n            </div>\r\n            \r\n            <ul>\r\n              <li\r\n                onClick={() => setTab(\"CHATROOM\")}\r\n                className={`member ${tab === \"CHATROOM\" ? \"active\" : \"\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {filteredUsers.map((user, index) => (\r\n                <li\r\n                  onClick={() => setTab(user.username)}\r\n                  className={`member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"}`}\r\n                  key={index}\r\n                >\r\n                  {user.username} {renderUserStatus(user)}\r\n                  {unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : ''}\r\n                  {user.username === userData.username && <span className=\"current-user-indicator\">(Tú)</span>}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          \r\n          <div className=\"chat-content\">\r\n            <header className=\"chat-header\">\r\n              {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n            </header>\r\n            \r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={tab === \"CHATROOM\" ? sendValue : sendPrivateValue}>Enviar</button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className='contenedor'>\r\n            <button className=\"logout-button\" onClick={logoutUser}>Cerrar sesión</button>\r\n          </div>\r\n        </div>\r\n        \r\n      ) : (\r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;*/\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChatRoomUI = _ref => {\n  _s();\n\n  var _allUsers$find, _allUsers$find2;\n\n  let {\n    userData,\n    privateChats,\n    publicChats,\n    tab,\n    setTab,\n    handleMessage,\n    sendValue,\n    sendPrivateValue,\n    handleUsername,\n    registerUser,\n    loginUser,\n    unreadMessages,\n    isRegistering,\n    setIsRegistering,\n    allUsers,\n    searchQuery,\n    setSearchQuery,\n    searchUsers,\n    logoutUser\n  } = _ref;\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (searchQuery === \"\") {\n      setFilteredUsers(allUsers);\n    } else {\n      setFilteredUsers(allUsers.filter(user => user.username.toLowerCase().includes(searchQuery.toLowerCase())));\n    }\n  }, [searchQuery, allUsers]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      if (tab === \"CHATROOM\") {\n        if (userData.message.trim()) {\n          sendValue();\n        }\n      } else {\n        if (userData.message.trim()) {\n          sendPrivateValue();\n        }\n      }\n    }\n  };\n\n  const handleSendClick = () => {\n    if (userData.message.trim()) {\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\n    }\n  };\n\n  const handleSearchChange = event => {\n    setSearchQuery(event.target.value);\n  };\n\n  const getUserStatusIndicator = user => {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `status-indicator ${user.online ? 'online' : 'offline'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this);\n  };\n\n  const getUserStatusClass = user => {\n    return user.online ? 'online' : 'offline';\n  };\n\n  const currentUser = allUsers.find(user => user.username === userData.username);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-bar\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Buscar usuarios\",\n            value: searchQuery,\n            onChange: handleSearchChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: searchUsers,\n            children: \"Buscar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => setTab(\"CHATROOM\"),\n            className: `member ${tab === \"CHATROOM\" ? \"active\" : \"\"}`,\n            children: \"CHAT4FUN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 15\n          }, this), filteredUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => setTab(user.username),\n            className: `member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"} ${getUserStatusClass(user)}`,\n            children: [getUserStatusIndicator(user), user.username, unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : '', user.username === userData.username && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"current-user-indicator\",\n              children: \"(T\\xFA)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 57\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"chat-header\",\n          children: [tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-header\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"last-connection\",\n              children: (_allUsers$find = allUsers.find(user => user.username === tab)) !== null && _allUsers$find !== void 0 && _allUsers$find.lastActive ? `Última conexión: ${new Date((_allUsers$find2 = allUsers.find(user => user.username === tab)) === null || _allUsers$find2 === void 0 ? void 0 : _allUsers$find2.lastActive).toLocaleString()}` : 'Nunca conectado'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username ? \"self\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sender-name\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"Escribe un mensaje\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleKeyDown,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: handleSendClick,\n            children: \"Enviar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contenedor\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logout-button\",\n          onClick: () => {\n            logoutUser();\n            handleUserDisconnect(userData.username);\n          },\n          children: \"Cerrar sesi\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), \"          \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bienvenido a CHAT4FUN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }, this), userData.errors && Object.keys(userData.errors).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-messages\",\n        children: Object.values(userData.errors).map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: error\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 13\n      }, this), isRegistering ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Usuario\",\n          name: \"username\",\n          value: userData.username,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Contrase\\xF1a\",\n          name: \"password\",\n          value: userData.password,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          name: \"email\",\n          value: userData.email,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: registerUser,\n          children: \"Registrarse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\xBFYa tienes una cuenta? \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => setIsRegistering(false),\n            children: \"Iniciar sesi\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Usuario\",\n          name: \"username\",\n          value: userData.username,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Contrase\\xF1a\",\n          name: \"password\",\n          value: userData.password,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: loginUser,\n          children: \"Iniciar sesi\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\xBFNo tienes una cuenta? \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => setIsRegistering(true),\n            children: \"Registrarse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 485,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoomUI, \"YA8OpzQeQBIzote1I5L6aQiH/oQ=\");\n\n_c = ChatRoomUI;\nexport default ChatRoomUI;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoomUI\");","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/Distribuidas/Distribuidas/PARCIAL II/PROYECTO/react-client/src/components/ChatRoomUI.js"],"names":["React","useEffect","useRef","useState","ChatRoomUI","userData","privateChats","publicChats","tab","setTab","handleMessage","sendValue","sendPrivateValue","handleUsername","registerUser","loginUser","unreadMessages","isRegistering","setIsRegistering","allUsers","searchQuery","setSearchQuery","searchUsers","logoutUser","filteredUsers","setFilteredUsers","messagesEndRef","filter","user","username","toLowerCase","includes","scrollToBottom","current","scrollIntoView","behavior","handleKeyDown","event","key","preventDefault","message","trim","handleSendClick","handleSearchChange","target","value","getUserStatusIndicator","online","getUserStatusClass","currentUser","find","connected","map","index","get","lastActive","Date","toLocaleString","chat","senderName","handleUserDisconnect","errors","Object","keys","length","values","error","password","email"],"mappingsgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAO,cAAP;;;;AAEA,MAAMC,UAAU,GAAG,QAoBb;AAAA;;AAAA;;AAAA,MApBc;AAClBC,IAAAA,QADkB;AAElBC,IAAAA,YAFkB;AAGlBC,IAAAA,WAHkB;AAIlBC,IAAAA,GAJkB;AAKlBC,IAAAA,MALkB;AAMlBC,IAAAA,aANkB;AAOlBC,IAAAA,SAPkB;AAQlBC,IAAAA,gBARkB;AASlBC,IAAAA,cATkB;AAUlBC,IAAAA,YAVkB;AAWlBC,IAAAA,SAXkB;AAYlBC,IAAAA,cAZkB;AAalBC,IAAAA,aAbkB;AAclBC,IAAAA,gBAdkB;AAelBC,IAAAA,QAfkB;AAgBlBC,IAAAA,WAhBkB;AAiBlBC,IAAAA,cAjBkB;AAkBlBC,IAAAA,WAlBkB;AAmBlBC,IAAAA;AAnBkB,GAoBd;AACJ,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAACgB,QAAD,CAAlD;AACA,QAAMO,cAAc,GAAGxB,MAAM,CAAC,IAAD,CAA7B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,WAAW,KAAK,EAApB,EAAwB;AACtBK,MAAAA,gBAAgB,CAACN,QAAD,CAAhB;AACD,KAFD,MAEO;AACLM,MAAAA,gBAAgB,CACdN,QAAQ,CAACQ,MAAT,CAAiBC,IAAD,IACdA,IAAI,CAACC,QAAL,CAAcC,WAAd,GAA4BC,QAA5B,CAAqCX,WAAW,CAACU,WAAZ,EAArC,CADF,CADc,CAAhB;AAKD;AACF,GAVQ,EAUN,CAACV,WAAD,EAAcD,QAAd,CAVM,CAAT;AAYAlB,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACzB,WAAD,EAAcD,YAAd,EAA4BE,GAA5B,CAFM,CAAT;;AAIA,QAAMwB,cAAc,GAAG,MAAM;AAAA;;AAC3B,6BAAAN,cAAc,CAACO,OAAf,gFAAwBC,cAAxB,CAAuC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAvC;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACzBD,MAAAA,KAAK,CAACE,cAAN;;AACA,UAAI/B,GAAG,KAAK,UAAZ,EAAwB;AACtB,YAAIH,QAAQ,CAACmC,OAAT,CAAiBC,IAAjB,EAAJ,EAA6B;AAC3B9B,UAAAA,SAAS;AACV;AACF,OAJD,MAIO;AACL,YAAIN,QAAQ,CAACmC,OAAT,CAAiBC,IAAjB,EAAJ,EAA6B;AAC3B7B,UAAAA,gBAAgB;AACjB;AACF;AACF;AACF,GAbD;;AAeA,QAAM8B,eAAe,GAAG,MAAM;AAC5B,QAAIrC,QAAQ,CAACmC,OAAT,CAAiBC,IAAjB,EAAJ,EAA6B;AAC3BjC,MAAAA,GAAG,KAAK,UAAR,GAAqBG,SAAS,EAA9B,GAAmCC,gBAAgB,EAAnD;AACD;AACF,GAJD;;AAMA,QAAM+B,kBAAkB,GAAIN,KAAD,IAAW;AACpChB,IAAAA,cAAc,CAACgB,KAAK,CAACO,MAAN,CAAaC,KAAd,CAAd;AACD,GAFD;;AAIA,QAAMC,sBAAsB,GAAIlB,IAAD,IAAU;AACvC,wBACE;AAAM,MAAA,SAAS,EAAG,oBAAmBA,IAAI,CAACmB,MAAL,GAAc,QAAd,GAAyB,SAAU;AAAxE;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GAJD;;AAKA,QAAMC,kBAAkB,GAAIpB,IAAD,IAAU;AACnC,WAAOA,IAAI,CAACmB,MAAL,GAAc,QAAd,GAAyB,SAAhC;AACD,GAFD;;AAKA,QAAME,WAAW,GAAG9B,QAAQ,CAAC+B,IAAT,CAActB,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBxB,QAAQ,CAACwB,QAAjD,CAApB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACGxB,QAAQ,CAAC8C,SAAT,gBACC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,iBAFd;AAGE,YAAA,KAAK,EAAE/B,WAHT;AAIE,YAAA,QAAQ,EAAEuB;AAJZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAQ,YAAA,OAAO,EAAErB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE;AAAA,kCACE;AACE,YAAA,OAAO,EAAE,MAAMb,MAAM,CAAC,UAAD,CADvB;AAEE,YAAA,SAAS,EAAG,UAASD,GAAG,KAAK,UAAR,GAAqB,QAArB,GAAgC,EAAG,EAF1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAOGgB,aAAa,CAAC4B,GAAd,CAAkB,CAACxB,IAAD,EAAOyB,KAAP,kBACnB;AACE,YAAA,OAAO,EAAE,MAAM5C,MAAM,CAACmB,IAAI,CAACC,QAAN,CADvB;AAEE,YAAA,SAAS,EAAG,UAASrB,GAAG,KAAKoB,IAAI,CAACC,QAAb,GAAwB,QAAxB,GAAmC,EAAG,IAAGD,IAAI,CAACC,QAAL,KAAkBxB,QAAQ,CAACwB,QAA3B,GAAsC,cAAtC,GAAuD,EAAG,IAAGb,cAAc,CAACsC,GAAf,CAAmB1B,IAAI,CAACC,QAAxB,IAAoC,QAApC,GAA+C,EAAG,IAAGmB,kBAAkB,CAACpB,IAAD,CAAO,EAF3M;AAAA,uBAKGkB,sBAAsB,CAAClB,IAAD,CALzB,EAMGA,IAAI,CAACC,QANR,EAOGb,cAAc,CAACsC,GAAf,CAAmB1B,IAAI,CAACC,QAAxB,IAAqC,IAAGb,cAAc,CAACsC,GAAf,CAAmB1B,IAAI,CAACC,QAAxB,CAAkC,iBAA1E,GAA6F,EAPhG,EAQGD,IAAI,CAACC,QAAL,KAAkBxB,QAAQ,CAACwB,QAA3B,iBAAuC;AAAM,cAAA,SAAS,EAAC,wBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAR1C;AAAA,aAGOwB,KAHP;AAAA;AAAA;AAAA;AAAA,kBADC,CAPH;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAmCE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCAEA;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAA,qBACL7C,GAAG,KAAK,UAAR,GAAqB,UAArB,GAAmC,YAAWA,GAAI,EAD7C,eAEN;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,mCACE;AAAM,cAAA,SAAS,EAAC,iBAAhB;AAAA,wBACG,kBAAAW,QAAQ,CAAC+B,IAAT,CAActB,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBrB,GAAxC,2DAA8C+C,UAA9C,GACI,oBAAmB,IAAIC,IAAJ,oBAASrC,QAAQ,CAAC+B,IAAT,CAActB,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBrB,GAAxC,CAAT,oDAAS,gBAA8C+C,UAAvD,EAAmEE,cAAnE,EAAoF,EAD3G,GAEG;AAHN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFM;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAaE;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,qBACG,CAACjD,GAAG,KAAK,UAAR,GAAqBD,WAArB,GAAmCD,YAAY,CAACgD,GAAb,CAAiB9C,GAAjB,KAAyB,EAA7D,EAAiE4C,GAAjE,CAAqE,CAACM,IAAD,EAAOL,KAAP,kBACpE;AAAI,YAAA,SAAS,EAAG,WAAUK,IAAI,CAACC,UAAL,KAAoBtD,QAAQ,CAACwB,QAA7B,GAAwC,MAAxC,GAAiD,EAAG,EAA9E;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,wBAA8B6B,IAAI,CAACC;AAAnC;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,wBAA+BD,IAAI,CAAClB;AAApC;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA,aAAsFa,KAAtF;AAAA;AAAA;AAAA;AAAA,kBADD,CADH,eAOE;AAAK,YAAA,GAAG,EAAE3B;AAAV;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,eAsBE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,SAAS,EAAC,eAFZ;AAGE,YAAA,WAAW,EAAC,oBAHd;AAIE,YAAA,KAAK,EAAErB,QAAQ,CAACmC,OAJlB;AAKE,YAAA,QAAQ,EAAE9B,aALZ;AAME,YAAA,SAAS,EAAE0B,aANb;AAOE,YAAA,QAAQ;AAPV;AAAA;AAAA;AAAA;AAAA,kBADF,eAUE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,aAAhC;AAA8C,YAAA,OAAO,EAAEM,eAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAnCF,eAwEE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACA;AAAQ,UAAA,SAAS,EAAC,eAAlB;AAAkC,UAAA,OAAO,EAAE,MAAM;AACzDnB,YAAAA,UAAU;AACVqC,YAAAA,oBAAoB,CAACvD,QAAQ,CAACwB,QAAV,CAApB;AACD,WAHS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxEF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAgFC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGxB,QAAQ,CAACwD,MAAT,IAAmBC,MAAM,CAACC,IAAP,CAAY1D,QAAQ,CAACwD,MAArB,EAA6BG,MAA7B,GAAsC,CAAzD,iBACC;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,kBACGF,MAAM,CAACG,MAAP,CAAc5D,QAAQ,CAACwD,MAAvB,EAA+BT,GAA/B,CAAmC,CAACc,KAAD,EAAQb,KAAR,kBAClC;AAAe,UAAA,SAAS,EAAC,OAAzB;AAAA,oBAAkCa;AAAlC,WAAQb,KAAR;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAHJ,EASGpC,aAAa,gBACZ;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,SAFd;AAGE,UAAA,IAAI,EAAC,UAHP;AAIE,UAAA,KAAK,EAAEZ,QAAQ,CAACwB,QAJlB;AAKE,UAAA,QAAQ,EAAEhB,cALZ;AAME,UAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,WAAW,EAAC,eAFd;AAGE,UAAA,IAAI,EAAC,UAHP;AAIE,UAAA,KAAK,EAAER,QAAQ,CAAC8D,QAJlB;AAKE,UAAA,QAAQ,EAAEtD,cALZ;AAME,UAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,gBATF,eAiBE;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,WAAW,EAAC,OAFd;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,KAAK,EAAER,QAAQ,CAAC+D,KAJlB;AAKE,UAAA,QAAQ,EAAEvD,cALZ;AAME,UAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,gBAjBF,eAyBE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAEC,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzBF,eA0BE;AAAA,gEAA0B;AAAM,YAAA,OAAO,EAAE,MAAMI,gBAAgB,CAAC,KAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1BF;AAAA,sBADY,gBA8BZ;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,SAFd;AAGE,UAAA,IAAI,EAAC,UAHP;AAIE,UAAA,KAAK,EAAEb,QAAQ,CAACwB,QAJlB;AAKE,UAAA,QAAQ,EAAEhB,cALZ;AAME,UAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,WAAW,EAAC,eAFd;AAGE,UAAA,IAAI,EAAC,UAHP;AAIE,UAAA,KAAK,EAAER,QAAQ,CAAC8D,QAJlB;AAKE,UAAA,QAAQ,EAAEtD,cALZ;AAME,UAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,gBATF,eAiBE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAEE,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBF,eAkBE;AAAA,gEAA0B;AAAM,YAAA,OAAO,EAAE,MAAMG,gBAAgB,CAAC,IAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBF;AAAA,sBAvCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAjFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAkJD,CAnOD;;GAAMd,U;;KAAAA,U;AAqON,eAAeA,UAAf","sourcesContent":["/*\r\n//este esta bien\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser\r\n}) => {\r\n\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        sendValue();\r\n      } else {\r\n        sendPrivateValue();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n\r\n            </div>\r\n            \r\n            <ul>\r\n              <li\r\n                onClick={() => setTab(\"CHATROOM\")}\r\n                className={`member ${tab === \"CHATROOM\" ? \"active\" : \"\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {filteredUsers.map((user, index) => (\r\n                <li\r\n                  onClick={() => setTab(user.username)}\r\n                  className={`member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"}`}\r\n                  key={index}\r\n                >\r\n                  {user.username} {unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : ''}\r\n                  {user.username === userData.username && <span className=\"current-user-indicator\">(Tú)</span>}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          \r\n\r\n          <div className=\"chat-content\">\r\n            \r\n            <header className=\"chat-header\">\r\n              \r\n              {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n            </header>\r\n            \r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={tab === \"CHATROOM\" ? sendValue : sendPrivateValue}>Enviar</button>\r\n            </div>\r\n\r\n          </div>\r\n          \r\n          <div className='contenedor'>\r\n          <button className=\"logout-button\" onClick={logoutUser}>Cerrar sesión</button>\r\n            </div>\r\n        </div>\r\n        \r\n      ) : (\r\n        \r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI; \r\n*/\r\n\r\n/*\r\n//este tiene inactivo \r\nimport React, { useEffect, useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser\r\n}) => {\r\n\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        sendValue();\r\n      } else {\r\n        sendPrivateValue();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n\r\n  const renderUserStatus = (user) => {\r\n    return user.online ? (\r\n      <span className=\"status-indicator online\">Active</span>\r\n    ) : (\r\n      <span className=\"status-indicator offline\">Inactive</span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n            </div>\r\n            \r\n            <ul>\r\n              <li\r\n                onClick={() => setTab(\"CHATROOM\")}\r\n                className={`member ${tab === \"CHATROOM\" ? \"active\" : \"\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {filteredUsers.map((user, index) => (\r\n                <li\r\n                  onClick={() => setTab(user.username)}\r\n                  className={`member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"}`}\r\n                  key={index}\r\n                >\r\n                  {user.username} {renderUserStatus(user)}\r\n                  {unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : ''}\r\n                  {user.username === userData.username && <span className=\"current-user-indicator\">(Tú)</span>}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          \r\n          <div className=\"chat-content\">\r\n            <header className=\"chat-header\">\r\n              {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n            </header>\r\n            \r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={tab === \"CHATROOM\" ? sendValue : sendPrivateValue}>Enviar</button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className='contenedor'>\r\n            <button className=\"logout-button\" onClick={logoutUser}>Cerrar sesión</button>\r\n          </div>\r\n        </div>\r\n        \r\n      ) : (\r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;*/\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser,\r\n}) => {\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [publicChats, privateChats, tab]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        if (userData.message.trim()) {\r\n          sendValue();\r\n        }\r\n      } else {\r\n        if (userData.message.trim()) {\r\n          sendPrivateValue();\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleSendClick = () => {\r\n    if (userData.message.trim()) {\r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n  \r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  \r\n  const getUserStatusIndicator = (user) => {\r\n    return (\r\n      <span className={`status-indicator ${user.online ? 'online' : 'offline'}`}></span>\r\n    );\r\n  };\r\n  const getUserStatusClass = (user) => {\r\n    return user.online ? 'online' : 'offline';\r\n  };\r\n  \r\n\r\n  const currentUser = allUsers.find(user => user.username === userData.username);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n            </div>\r\n            \r\n            <ul>\r\n              <li\r\n                onClick={() => setTab(\"CHATROOM\")}\r\n                className={`member ${tab === \"CHATROOM\" ? \"active\" : \"\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {filteredUsers.map((user, index) => (\r\n              <li\r\n                onClick={() => setTab(user.username)}\r\n                className={`member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"} ${getUserStatusClass(user)}`}\r\n                key={index}\r\n              >\r\n                {getUserStatusIndicator(user)}\r\n                {user.username}\r\n                {unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : ''}\r\n                {user.username === userData.username && <span className=\"current-user-indicator\">(Tú)</span>}\r\n              </li>\r\n            ))}\r\n\r\n            </ul>\r\n          </div>\r\n          \r\n          <div className=\"chat-content\">\r\n            \r\n          <header className=\"chat-header\">\r\n    {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n    <div className=\"chat-header\">\r\n      <span className=\"last-connection\">\r\n        {allUsers.find(user => user.username === tab)?.lastActive \r\n          ? `Última conexión: ${new Date(allUsers.find(user => user.username === tab)?.lastActive).toLocaleString()}`\r\n          : 'Nunca conectado'}\r\n      </span>\r\n    </div>\r\n  </header>\r\n     \r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n              <div ref={messagesEndRef} /> \r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={handleSendClick}>Enviar</button>\r\n            </div>\r\n\r\n          </div>\r\n          \r\n          <div className='contenedor'>\r\n          <button className=\"logout-button\" onClick={() => {\r\n  logoutUser();\r\n  handleUserDisconnect(userData.username);\r\n}}>Cerrar sesión</button>          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;\r\n"]},"metadata":{},"sourceType":"module"}