{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\Distribuidas\\\\Distribuidas\\\\PARCIAL II\\\\PROYECTO\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport ChatRoomUI from './ChatRoomUI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  /*\r\n    const onConnected = () => {\r\n      setUserData({ ...userData, \"connected\": true });\r\n      stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n      stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n      userJoin();\r\n    }*/\n\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived); // Nueva suscripciÃ³n\n\n    userJoin();\n  };\n\n  const onNotificationReceived = payload => {\n    var notification = JSON.parse(payload.body);\n    alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const registerUser = () => {\n    connect();\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatRoomUI, {\n    userData: userData,\n    privateChats: privateChats,\n    publicChats: publicChats,\n    tab: tab,\n    setTab: setTab,\n    handleMessage: handleMessage,\n    sendValue: sendValue,\n    sendPrivateValue: sendPrivateValue,\n    handleUsername: handleUsername,\n    registerUser: registerUser\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"/tXc1A/oAw8rqK7oqoQbKf2rFUk=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/Distribuidas/Distribuidas/PARCIAL II/PROYECTO/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","SockJS","ChatRoomUI","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","console","log","connect","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","onNotificationReceived","userJoin","payload","notification","JSON","parse","body","alert","chatMessage","senderName","status","send","stringify","payloadData","get","set","push","list","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","registerUser"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\n\r\nvar stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  \r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(userData);\r\n  }, [userData]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n/*\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, \"connected\": true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }*/\r\n\r\n    const onConnected = () => {\r\n      setUserData({ ...userData, \"connected\": true });\r\n      stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n      stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n      stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived); // Nueva suscripciÃ³n\r\n      userJoin();\r\n  }\r\n  \r\n  const onNotificationReceived = (payload) => {\r\n      var notification = JSON.parse(payload.body);\r\n      alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n  }\r\n  \r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    console.log(payload);\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n  }\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, \"message\": value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      console.log(chatMessage);\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, \"message\": \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, \"message\": \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, \"username\": value });\r\n  }\r\n\r\n  const registerUser = () => {\r\n    connect();\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={setTab}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n"]},"metadata":{},"sourceType":"module"}