{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\Distribuidas\\\\Distribuidas\\\\PARCIAL II\\\\PROYECTO\\\\react-client\\\\src\\\\components\\\\ChatRoomUI.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\n// import '../index.css';\n// const ChatRoomUI = ({\n//   userData,\n//   privateChats,\n//   publicChats,\n//   tab,\n//   setTab,\n//   handleMessage,\n//   sendValue,\n//   sendPrivateValue,\n//   handleUsername,\n//   registerUser\n// }) => {\n//   // Maneja el evento de teclado\n//   const handleKeyDown = (event) => {\n//     if (event.key === 'Enter') {\n//       event.preventDefault(); \n//         sendValue(); \n//       } else {\n//         sendPrivateValue(); \n//     }\n//   };\n//   return (\n//     <div className=\"container\">\n//       {userData.connected ? (\n//         <div className=\"chat-box\">\n//           <div className=\"member-list\">\n//             <ul>\n//               <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>CHAT4FUN</li>\n//               {[...privateChats.keys()].map((name, index) => (\n//                 <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\n//               ))}\n//             </ul>\n//           </div>\n//           {tab === \"CHATROOM\" && <div className=\"chat-content\">\n//             <ul className=\"chat-messages\">\n//               {publicChats.map((chat, index) => (\n//                 <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\n//                   <div className=\"sender-name\">{chat.senderName}</div>\n//                   <div className=\"message-data\">{chat.message}</div>\n//                 </li>\n//               ))}\n//             </ul>\n//             <div className=\"send-message\">\n//               <input\n//                 type=\"text\"\n//                 className=\"input-message\"\n//                 placeholder=\"Escribe un mensaje\"\n//                 value={userData.message}\n//                 onChange={handleMessage}\n//                 onKeyDown={handleKeyDown} \n//                 required\n//               />\n//               <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\n//             </div>\n//           </div>}\n//           {tab !== \"CHATROOM\" && <div className=\"chat-content\">\n//             <ul className=\"chat-messages\">\n//               {[...privateChats.get(tab)].map((chat, index) => (\n//                 <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\n//                   <div className=\"sender-name\">{chat.senderName}</div>\n//                   <div className=\"message-data\">{chat.message}</div>\n//                 </li>\n//               ))}\n//             </ul>\n//             <div className=\"send-message\">\n//               <input\n//                 type=\"text\"\n//                 className=\"input-message\"\n//                 placeholder=\"Escribe un mensaje\"\n//                 value={userData.message}\n//                 onChange={handleMessage}\n//                 onKeyDown={handleKeyDown} // Asocia el evento de teclado\n//                 required\n//               />\n//               <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\n//             </div>\n//           </div>}\n//         </div>\n//       ) : (\n//         <div className=\"re\">\n//           <h1>Bienvenido a CHAT4FUN</h1>\n//           <div className=\"register\">\n//             <input\n//               id=\"user-name\"\n//               placeholder=\"Ingresa tu nombre\"\n//               name=\"userName\"\n//               value={userData.username}\n//               onChange={handleUsername}\n//               margin=\"normal\"\n//               required\n//             />\n//           </div>\n//           <button type=\"button\" id=\"btn-registro\" onClick={registerUser} >\n//             Entrar\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n// export default ChatRoomUI;\n\n/*\r\nimport React from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  unreadMessages,\r\n  //setUnreadMessages\r\n}) => {\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault(); \r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li \r\n                onClick={() => setTab(\"CHATROOM\")} \r\n                className={`member ${tab === \"CHATROOM\" && \"active\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li \r\n                  onClick={() => setTab(name)} \r\n                  className={`member ${tab === name && \"active\"} ${unreadMessages.get(name) ? \"unread\" : \"\"}`} \r\n                  key={index}\r\n                >\r\n                  {name} {unreadMessages.get(name) ? `(${unreadMessages.get(name)}) Nuevo Mensaje` : ''}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {publicChats.map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown} \r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n          {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {[...privateChats.get(tab)].map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n        </div>\r\n      ) : (\r\n        <div className=\"re\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          <div className=\"register\">\r\n            <input\r\n              id=\"user-name\"\r\n              placeholder=\"Ingresa tu nombre\"\r\n              name=\"userName\"\r\n              value={userData.username}\r\n              onChange={handleUsername}\r\n              margin=\"normal\"\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"button\" id=\"btn-registro\" onClick={registerUser}>\r\n            Entrar\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;\r\n*/\n\n/* \r\nimport React from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  unreadMessages,\r\n}) => {\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault(); \r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li \r\n                onClick={() => setTab(\"CHATROOM\")} \r\n                className={`member ${tab === \"CHATROOM\" && \"active\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li \r\n                  onClick={() => setTab(name)} \r\n                  className={`member ${tab === name && \"active\"} ${unreadMessages.get(name) ? \"unread\" : \"\"}`} \r\n                  key={index}\r\n                >\r\n                  {name} {unreadMessages.get(name) ? `(${unreadMessages.get(name)}) Nuevo Mensaje` : ''}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {publicChats.map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown} \r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n          {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {[...privateChats.get(tab)].map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n        </div>\r\n      ) : (\r\n        <div className=\"re\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          <div className=\"register\">\r\n            <input\r\n              id=\"user-name\"\r\n              placeholder=\"Ingresa tu nombre\"\r\n              name=\"userName\"\r\n              value={userData.username}\r\n              onChange={handleUsername}\r\n              margin=\"normal\"\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"button\" id=\"btn-registro\" onClick={registerUser}>\r\n            Entrar\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;\r\n */\n\n/* \r\nimport React from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n}) => {\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault(); \r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li \r\n                onClick={() => setTab(\"CHATROOM\")} \r\n                className={`member ${tab === \"CHATROOM\" && \"active\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li \r\n                  onClick={() => setTab(name)} \r\n                  className={`member ${tab === name && \"active\"} ${unreadMessages.get(name) ? \"unread\" : \"\"}`} \r\n                  key={index}\r\n                >\r\n                  {name} {unreadMessages.get(name) ? `(${unreadMessages.get(name)}) Nuevo Mensaje` : ''}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {publicChats.map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown} \r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n          {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {[...privateChats.get(tab)].map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n        </div>\r\n      ) : (\r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n       \r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;*/\n\n/* \r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser,\r\n  onlineUsers,\r\n  isReconnecting\r\n}) => {\r\n\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        sendValue();\r\n      } else {\r\n        sendPrivateValue();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n\r\n            </div>\r\n            \r\n            <ul>\r\n              <li\r\n                onClick={() => setTab(\"CHATROOM\")}\r\n                className={`member ${tab === \"CHATROOM\" ? \"active\" : \"\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {filteredUsers.map((user, index) => (\r\n                <li\r\n                  onClick={() => setTab(user.username)}\r\n                  className={`member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"}`}\r\n                  key={index}\r\n                >\r\n                  {user.username} {unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : ''}\r\n                  {user.username === userData.username && <span className=\"current-user-indicator\">(Tú)</span>}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          \r\n\r\n          <div className=\"chat-content\">\r\n            \r\n            <header className=\"chat-header\">\r\n              \r\n              {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n            </header>\r\n            \r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={tab === \"CHATROOM\" ? sendValue : sendPrivateValue}>Enviar</button>\r\n            </div>\r\n\r\n          </div>\r\n          \r\n          <div className='contenedor'>\r\n          <button className=\"logout-button\" onClick={logoutUser}>Cerrar sesión</button>\r\n            </div>\r\n        </div>\r\n        \r\n      ) : (\r\n        \r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;\r\n */\n\n/*\r\nimport React from 'react';\r\nimport '../index.css';\r\nconst ChatRoomUI = ({\r\nuserData,\r\nprivateChats,\r\npublicChats,\r\ntab,\r\nsetTab,\r\nhandleMessage,\r\nsendValue,\r\nsendPrivateValue,\r\nhandleUsername,\r\nregisterUser,\r\nloginUser,\r\nunreadMessages,\r\nisRegistering,\r\nsetIsRegistering,\r\n}) => {\r\nconst handleKeyDown = (event) => {\r\n if (event.key === 'Enter') {\r\n   event.preventDefault(); \r\n   tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n }\r\n};\r\n return (\r\n <div className=\"container\">\r\n   {userData.connected ? (\r\n     <div className=\"chat-box\">\r\n       <div className=\"member-list\">\r\n         <ul>\r\n           <li \r\n             onClick={() => setTab(\"CHATROOM\")} \r\n             className={`member ${tab === \"CHATROOM\" && \"active\"}`}\r\n           >\r\n             CHAT4FUN\r\n           </li>\r\n           {[...privateChats.keys()].map((name, index) => (\r\n             <li \r\n               onClick={() => setTab(name)} \r\n               className={`member ${tab === name && \"active\"} ${unreadMessages.get(name) ? \"unread\" : \"\"}`} \r\n               key={index}\r\n             >\r\n               {name} {unreadMessages.get(name) ? `(${unreadMessages.get(name)}) Nuevo Mensaje` : ''}\r\n             </li>\r\n           ))}\r\n         </ul>\r\n       </div>\r\n       {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n         <ul className=\"chat-messages\">\r\n           {publicChats.map((chat, index) => (\r\n             <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n               <div className=\"sender-name\">{chat.senderName}</div>\r\n               <div className=\"message-data\">{chat.message}</div>\r\n             </li>\r\n           ))}\r\n         </ul>\r\n           <div className=\"send-message\">\r\n           <input\r\n             type=\"text\"\r\n             className=\"input-message\"\r\n             placeholder=\"Escribe un mensaje\"\r\n             value={userData.message}\r\n             onChange={handleMessage}\r\n             onKeyDown={handleKeyDown} \r\n             required\r\n           />\r\n           <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\r\n         </div>\r\n       </div>}\r\n       {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n         <ul className=\"chat-messages\">\r\n           {[...privateChats.get(tab)].map((chat, index) => (\r\n             <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n               <div className=\"sender-name\">{chat.senderName}</div>\r\n               <div className=\"message-data\">{chat.message}</div>\r\n             </li>\r\n           ))}\r\n         </ul>\r\n           <div className=\"send-message\">\r\n           <input\r\n             type=\"text\"\r\n             className=\"input-message\"\r\n             placeholder=\"Escribe un mensaje\"\r\n             value={userData.message}\r\n             onChange={handleMessage}\r\n             onKeyDown={handleKeyDown}\r\n             required\r\n           />\r\n           <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\r\n         </div>\r\n       </div>}\r\n     </div>\r\n   ) : (\r\n     <div className=\"register\">\r\n       <h1>Bienvenido a CHAT4FUN</h1>\r\n       {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n         <div className=\"error-messages\">\r\n           {Object.values(userData.errors).map((error, index) => (\r\n             <p key={index} className=\"error\">{error}</p>\r\n           ))}\r\n         </div>\r\n       )}\r\n       {isRegistering ? (\r\n         <>\r\n           <input\r\n             type=\"text\"\r\n             placeholder=\"Usuario\"\r\n             name=\"username\"\r\n             value={userData.username}\r\n             onChange={handleUsername}\r\n             required\r\n           />\r\n           <input\r\n             type=\"password\"\r\n             placeholder=\"Contraseña\"\r\n             name=\"password\"\r\n             value={userData.password}\r\n             onChange={handleUsername}\r\n             required\r\n           />\r\n           <input\r\n             type=\"email\"\r\n             placeholder=\"Email\"\r\n             name=\"email\"\r\n             value={userData.email}\r\n             onChange={handleUsername}\r\n             required\r\n           />\r\n           <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n           <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n         </>\r\n       ) : (\r\n         <>\r\n           <input\r\n             type=\"text\"\r\n             placeholder=\"Usuario\"\r\n             name=\"username\"\r\n             value={userData.username}\r\n             onChange={handleUsername}\r\n             required\r\n           />\r\n           <input\r\n             type=\"password\"\r\n             placeholder=\"Contraseña\"\r\n             name=\"password\"\r\n             value={userData.password}\r\n             onChange={handleUsername}\r\n             required\r\n           />\r\n    \r\n           <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n           <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n         </>\r\n       )}\r\n     </div>\r\n   )}\r\n </div>\r\n);\r\n}\r\nexport default ChatRoomUI;*/\nimport React, { useEffect, useState } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChatRoomUI = _ref => {\n  _s();\n\n  let {\n    userData,\n    privateChats,\n    publicChats,\n    tab,\n    setTab,\n    handleMessage,\n    sendValue,\n    sendPrivateValue,\n    handleUsername,\n    registerUser,\n    loginUser,\n    unreadMessages,\n    isRegistering,\n    setIsRegistering,\n    allUsers,\n    searchQuery,\n    setSearchQuery,\n    searchUsers,\n    logoutUser,\n    onlineUsers,\n    isReconnecting\n  } = _ref;\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\n  useEffect(() => {\n    if (searchQuery === \"\") {\n      setFilteredUsers(allUsers);\n    } else {\n      setFilteredUsers(allUsers.filter(user => user.username.toLowerCase().includes(searchQuery.toLowerCase())));\n    }\n  }, [searchQuery, allUsers]);\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      if (tab === \"CHATROOM\") {\n        sendValue();\n      } else {\n        sendPrivateValue();\n      }\n    }\n  };\n\n  const handleSearchChange = event => {\n    setSearchQuery(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-bar\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Buscar usuarios\",\n            value: searchQuery,\n            onChange: handleSearchChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 951,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: searchUsers,\n            children: \"Buscar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 957,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 950,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => setTab(\"CHATROOM\"),\n            className: `member ${tab === \"CHATROOM\" ? \"active\" : \"\"}`,\n            children: \"CHAT4FUN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 962,\n            columnNumber: 15\n          }, this), filteredUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => setTab(user.username),\n            className: `member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"}`,\n            children: [user.username, \" \", unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : '', user.username === userData.username && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"current-user-indicator\",\n              children: \"(T\\xFA)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 975,\n              columnNumber: 59\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 961,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 949,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"chat-header\",\n          children: tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 984,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: (tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username ? \"self\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sender-name\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 992,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 993,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 991,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 989,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"Escribe un mensaje\",\n            value: userData.message,\n            onChange: handleMessage,\n            onKeyDown: handleKeyDown,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 998,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: tab === \"CHATROOM\" ? sendValue : sendPrivateValue,\n            children: \"Enviar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1007,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 997,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 982,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contenedor\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logout-button\",\n          onClick: logoutUser,\n          children: \"Cerrar sesi\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1012,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 948,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bienvenido a CHAT4FUN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 11\n      }, this), userData.errors && Object.keys(userData.errors).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-messages\",\n        children: Object.values(userData.errors).map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: error\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1024,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 13\n      }, this), isRegistering ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Usuario\",\n          name: \"username\",\n          value: userData.username,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Contrase\\xF1a\",\n          name: \"password\",\n          value: userData.password,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          name: \"email\",\n          value: userData.email,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1046,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: registerUser,\n          children: \"Registrarse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1054,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\xBFYa tienes una cuenta? \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => setIsRegistering(false),\n            children: \"Iniciar sesi\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1055,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1055,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Usuario\",\n          name: \"username\",\n          value: userData.username,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1059,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Contrase\\xF1a\",\n          name: \"password\",\n          value: userData.password,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1067,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: loginUser,\n          children: \"Iniciar sesi\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1075,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\xBFNo tienes una cuenta? \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => setIsRegistering(true),\n            children: \"Registrarse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1076,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1076,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1019,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 946,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoomUI, \"3drVn4BGOL2KbQEvgCOXNvrKgGY=\");\n\n_c = ChatRoomUI;\nexport default ChatRoomUI;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoomUI\");","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/Distribuidas/Distribuidas/PARCIAL II/PROYECTO/react-client/src/components/ChatRoomUI.js"],"names":["React","useEffect","useState","ChatRoomUI","userData","privateChats","publicChats","tab","setTab","handleMessage","sendValue","sendPrivateValue","handleUsername","registerUser","loginUser","unreadMessages","isRegistering","setIsRegistering","allUsers","searchQuery","setSearchQuery","searchUsers","logoutUser","onlineUsers","isReconnecting","filteredUsers","setFilteredUsers","filter","user","username","toLowerCase","includes","handleKeyDown","event","key","preventDefault","handleSearchChange","target","value","connected","map","index","get","chat","senderName","message","errors","Object","keys","length","values","error","password","email"],"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","sourcesContent":["// import React from 'react';\r\n// import '../index.css';\r\n\r\n// const ChatRoomUI = ({\r\n//   userData,\r\n//   privateChats,\r\n//   publicChats,\r\n//   tab,\r\n//   setTab,\r\n//   handleMessage,\r\n//   sendValue,\r\n//   sendPrivateValue,\r\n//   handleUsername,\r\n//   registerUser\r\n// }) => {\r\n//   // Maneja el evento de teclado\r\n//   const handleKeyDown = (event) => {\r\n//     if (event.key === 'Enter') {\r\n//       event.preventDefault(); \r\n//         sendValue(); \r\n//       } else {\r\n//         sendPrivateValue(); \r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       {userData.connected ? (\r\n//         <div className=\"chat-box\">\r\n//           <div className=\"member-list\">\r\n//             <ul>\r\n//               <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>CHAT4FUN</li>\r\n//               {[...privateChats.keys()].map((name, index) => (\r\n//                 <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\r\n//               ))}\r\n//             </ul>\r\n//           </div>\r\n//           {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n//             <ul className=\"chat-messages\">\r\n//               {publicChats.map((chat, index) => (\r\n//                 <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n//                   <div className=\"sender-name\">{chat.senderName}</div>\r\n//                   <div className=\"message-data\">{chat.message}</div>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n\r\n//             <div className=\"send-message\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 className=\"input-message\"\r\n//                 placeholder=\"Escribe un mensaje\"\r\n//                 value={userData.message}\r\n//                 onChange={handleMessage}\r\n//                 onKeyDown={handleKeyDown} \r\n//                 required\r\n//               />\r\n//               <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\r\n//             </div>\r\n//           </div>}\r\n//           {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n//             <ul className=\"chat-messages\">\r\n//               {[...privateChats.get(tab)].map((chat, index) => (\r\n//                 <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n//                   <div className=\"sender-name\">{chat.senderName}</div>\r\n//                   <div className=\"message-data\">{chat.message}</div>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n\r\n//             <div className=\"send-message\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 className=\"input-message\"\r\n//                 placeholder=\"Escribe un mensaje\"\r\n//                 value={userData.message}\r\n//                 onChange={handleMessage}\r\n//                 onKeyDown={handleKeyDown} // Asocia el evento de teclado\r\n//                 required\r\n//               />\r\n//               <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\r\n//             </div>\r\n//           </div>}\r\n//         </div>\r\n//       ) : (\r\n//         <div className=\"re\">\r\n//           <h1>Bienvenido a CHAT4FUN</h1>\r\n//           <div className=\"register\">\r\n//             <input\r\n//               id=\"user-name\"\r\n//               placeholder=\"Ingresa tu nombre\"\r\n//               name=\"userName\"\r\n//               value={userData.username}\r\n//               onChange={handleUsername}\r\n//               margin=\"normal\"\r\n              \r\n//               required\r\n//             />\r\n//           </div>\r\n//           <button type=\"button\" id=\"btn-registro\" onClick={registerUser} >\r\n//             Entrar\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ChatRoomUI;\r\n\r\n/*\r\nimport React from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  unreadMessages,\r\n  //setUnreadMessages\r\n}) => {\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault(); \r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li \r\n                onClick={() => setTab(\"CHATROOM\")} \r\n                className={`member ${tab === \"CHATROOM\" && \"active\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li \r\n                  onClick={() => setTab(name)} \r\n                  className={`member ${tab === name && \"active\"} ${unreadMessages.get(name) ? \"unread\" : \"\"}`} \r\n                  key={index}\r\n                >\r\n                  {name} {unreadMessages.get(name) ? `(${unreadMessages.get(name)}) Nuevo Mensaje` : ''}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {publicChats.map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown} \r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n          {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {[...privateChats.get(tab)].map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n        </div>\r\n      ) : (\r\n        <div className=\"re\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          <div className=\"register\">\r\n            <input\r\n              id=\"user-name\"\r\n              placeholder=\"Ingresa tu nombre\"\r\n              name=\"userName\"\r\n              value={userData.username}\r\n              onChange={handleUsername}\r\n              margin=\"normal\"\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"button\" id=\"btn-registro\" onClick={registerUser}>\r\n            Entrar\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;\r\n*/\r\n/* \r\nimport React from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  unreadMessages,\r\n}) => {\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault(); \r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li \r\n                onClick={() => setTab(\"CHATROOM\")} \r\n                className={`member ${tab === \"CHATROOM\" && \"active\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li \r\n                  onClick={() => setTab(name)} \r\n                  className={`member ${tab === name && \"active\"} ${unreadMessages.get(name) ? \"unread\" : \"\"}`} \r\n                  key={index}\r\n                >\r\n                  {name} {unreadMessages.get(name) ? `(${unreadMessages.get(name)}) Nuevo Mensaje` : ''}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {publicChats.map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown} \r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n          {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {[...privateChats.get(tab)].map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n        </div>\r\n      ) : (\r\n        <div className=\"re\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          <div className=\"register\">\r\n            <input\r\n              id=\"user-name\"\r\n              placeholder=\"Ingresa tu nombre\"\r\n              name=\"userName\"\r\n              value={userData.username}\r\n              onChange={handleUsername}\r\n              margin=\"normal\"\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"button\" id=\"btn-registro\" onClick={registerUser}>\r\n            Entrar\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;\r\n */\r\n\r\n/* \r\nimport React from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n}) => {\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault(); \r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li \r\n                onClick={() => setTab(\"CHATROOM\")} \r\n                className={`member ${tab === \"CHATROOM\" && \"active\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li \r\n                  onClick={() => setTab(name)} \r\n                  className={`member ${tab === name && \"active\"} ${unreadMessages.get(name) ? \"unread\" : \"\"}`} \r\n                  key={index}\r\n                >\r\n                  {name} {unreadMessages.get(name) ? `(${unreadMessages.get(name)}) Nuevo Mensaje` : ''}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {publicChats.map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown} \r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n          {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {[...privateChats.get(tab)].map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n        </div>\r\n      ) : (\r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n       \r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;*/\r\n\r\n/* \r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser,\r\n  onlineUsers,\r\n  isReconnecting\r\n}) => {\r\n\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        sendValue();\r\n      } else {\r\n        sendPrivateValue();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n\r\n            </div>\r\n            \r\n            <ul>\r\n              <li\r\n                onClick={() => setTab(\"CHATROOM\")}\r\n                className={`member ${tab === \"CHATROOM\" ? \"active\" : \"\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {filteredUsers.map((user, index) => (\r\n                <li\r\n                  onClick={() => setTab(user.username)}\r\n                  className={`member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"}`}\r\n                  key={index}\r\n                >\r\n                  {user.username} {unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : ''}\r\n                  {user.username === userData.username && <span className=\"current-user-indicator\">(Tú)</span>}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          \r\n\r\n          <div className=\"chat-content\">\r\n            \r\n            <header className=\"chat-header\">\r\n              \r\n              {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n            </header>\r\n            \r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={tab === \"CHATROOM\" ? sendValue : sendPrivateValue}>Enviar</button>\r\n            </div>\r\n\r\n          </div>\r\n          \r\n          <div className='contenedor'>\r\n          <button className=\"logout-button\" onClick={logoutUser}>Cerrar sesión</button>\r\n            </div>\r\n        </div>\r\n        \r\n      ) : (\r\n        \r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;\r\n *//*\r\n\r\nimport React from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n}) => {\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault(); \r\n      tab === \"CHATROOM\" ? sendValue() : sendPrivateValue();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li \r\n                onClick={() => setTab(\"CHATROOM\")} \r\n                className={`member ${tab === \"CHATROOM\" && \"active\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li \r\n                  onClick={() => setTab(name)} \r\n                  className={`member ${tab === name && \"active\"} ${unreadMessages.get(name) ? \"unread\" : \"\"}`} \r\n                  key={index}\r\n                >\r\n                  {name} {unreadMessages.get(name) ? `(${unreadMessages.get(name)}) Nuevo Mensaje` : ''}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {publicChats.map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown} \r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n          {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n            <ul className=\"chat-messages\">\r\n              {[...privateChats.get(tab)].map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\r\n            </div>\r\n          </div>}\r\n        </div>\r\n      ) : (\r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n       \r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;*/\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst ChatRoomUI = ({\r\n  userData,\r\n  privateChats,\r\n  publicChats,\r\n  tab,\r\n  setTab,\r\n  handleMessage,\r\n  sendValue,\r\n  sendPrivateValue,\r\n  handleUsername,\r\n  registerUser,\r\n  loginUser,\r\n  unreadMessages,\r\n  isRegistering,\r\n  setIsRegistering,\r\n  allUsers,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  searchUsers,\r\n  logoutUser,\r\n  onlineUsers,\r\n  isReconnecting\r\n}) => {\r\n\r\n  const [filteredUsers, setFilteredUsers] = useState(allUsers);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchQuery, allUsers]);\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      if (tab === \"CHATROOM\") {\r\n        sendValue();\r\n      } else {\r\n        sendPrivateValue();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <div className=\"search-bar\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button onClick={searchUsers}>Buscar</button>\r\n\r\n            </div>\r\n            \r\n            <ul>\r\n              <li\r\n                onClick={() => setTab(\"CHATROOM\")}\r\n                className={`member ${tab === \"CHATROOM\" ? \"active\" : \"\"}`}\r\n              >\r\n                CHAT4FUN\r\n              </li>\r\n              {filteredUsers.map((user, index) => (\r\n                <li\r\n                  onClick={() => setTab(user.username)}\r\n                  className={`member ${tab === user.username ? \"active\" : \"\"} ${user.username === userData.username ? \"current-user\" : \"\"} ${unreadMessages.get(user.username) ? \"unread\" : \"\"}`}\r\n                  key={index}\r\n                >\r\n                  {user.username} {unreadMessages.get(user.username) ? `(${unreadMessages.get(user.username)}) Nuevo Mensaje` : ''}\r\n                  {user.username === userData.username && <span className=\"current-user-indicator\">(Tú)</span>}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          \r\n\r\n          <div className=\"chat-content\">\r\n            \r\n            <header className=\"chat-header\">\r\n              \r\n              {tab === \"CHATROOM\" ? \"CHATROOM\" : `Chat con ${tab}`}\r\n            </header>\r\n            \r\n            <ul className=\"chat-messages\">\r\n              {(tab === \"CHATROOM\" ? publicChats : privateChats.get(tab) || []).map((chat, index) => (\r\n                <li className={`message ${chat.senderName === userData.username ? \"self\" : \"\"}`} key={index}>\r\n                  <div className=\"sender-name\">{chat.senderName}</div>\r\n                  <div className=\"message-data\">{chat.message}</div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"send-message\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-message\"\r\n                placeholder=\"Escribe un mensaje\"\r\n                value={userData.message}\r\n                onChange={handleMessage}\r\n                onKeyDown={handleKeyDown}\r\n                required\r\n              />\r\n              <button type=\"button\" className=\"send-button\" onClick={tab === \"CHATROOM\" ? sendValue : sendPrivateValue}>Enviar</button>\r\n            </div>\r\n\r\n          </div>\r\n          \r\n          <div className='contenedor'>\r\n          <button className=\"logout-button\" onClick={logoutUser}>Cerrar sesión</button>\r\n            </div>\r\n        </div>\r\n        \r\n      ) : (\r\n        \r\n        <div className=\"register\">\r\n          <h1>Bienvenido a CHAT4FUN</h1>\r\n          {userData.errors && Object.keys(userData.errors).length > 0 && (\r\n            <div className=\"error-messages\">\r\n              {Object.values(userData.errors).map((error, index) => (\r\n                <p key={index} className=\"error\">{error}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {isRegistering ? (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={userData.email}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>Registrarse</button>\r\n              <p>¿Ya tienes una cuenta? <span onClick={() => setIsRegistering(false)}>Iniciar sesión</span></p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                name=\"username\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                name=\"password\"\r\n                value={userData.password}\r\n                onChange={handleUsername}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={loginUser}>Iniciar sesión</button>\r\n              <p>¿No tienes una cuenta? <span onClick={() => setIsRegistering(true)}>Registrarse</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomUI;\r\n "]},"metadata":{},"sourceType":"module"}