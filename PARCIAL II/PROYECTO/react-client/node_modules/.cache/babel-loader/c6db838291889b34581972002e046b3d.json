{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\Distribuidas\\\\Distribuidas\\\\PARCIAL II\\\\PROYECTO\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\n// import React, { useEffect, useState } from 'react';\n// import { over } from 'stompjs';\n// import SockJS from 'sockjs-client';\n// import ChatRoomUI from './ChatRoomUI';\n// var stompClient = null;\n// const ChatRoom = () => {\n//   const [privateChats, setPrivateChats] = useState(new Map());\n//   const [publicChats, setPublicChats] = useState([]);\n//   const [tab, setTab] = useState(\"CHATROOM\");\n//   const [unreadMessages, setUnreadMessages] = useState(new Map());\n//   const [userData, setUserData] = useState({\n//     username: '',\n//     receivername: '',\n//     connected: false,\n//     message: ''\n//   });\n//   useEffect(() => {\n//     console.log(userData);\n//   }, [userData]);\n//   const connect = () => {\n//     let Sock = new SockJS('http://localhost:8080/ws');\n//     stompClient = over(Sock);\n//     stompClient.connect({}, onConnected, onError);\n//   }\n// /*\n//   const onConnected = () => {\n//     setUserData({ ...userData, \"connected\": true });\n//     stompClient.subscribe('/chatroom/public', onMessageReceived);\n//     stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n//     userJoin();\n//   }*/\n//     const onConnected = () => {\n//       setUserData({ ...userData, \"connected\": true });\n//       stompClient.subscribe('/chatroom/public', onMessageReceived);\n//       stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n//       stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived); // Nueva suscripción\n//       userJoin();\n//   }\n//   const onNotificationReceived = (payload) => {\n//       var notification = JSON.parse(payload.body);\n//       alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\n//   }\n//   const userJoin = () => {\n//     var chatMessage = {\n//       senderName: userData.username,\n//       status: \"JOIN\"\n//     };\n//     stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n//   }\n//   const onMessageReceived = (payload) => {\n//     var payloadData = JSON.parse(payload.body);\n//     switch (payloadData.status) {\n//       case \"JOIN\":\n//         if (!privateChats.get(payloadData.senderName)) {\n//           privateChats.set(payloadData.senderName, []);\n//           setPrivateChats(new Map(privateChats));\n//         }\n//         break;\n//       case \"MESSAGE\":\n//         publicChats.push(payloadData);\n//         setPublicChats([...publicChats]);\n//         break;\n//     }\n//   }\n// /*\n//   const onPrivateMessage = (payload) => {\n//     console.log(payload);\n//     var payloadData = JSON.parse(payload.body);\n//     if (privateChats.get(payloadData.senderName)) {\n//       privateChats.get(payloadData.senderName).push(payloadData);\n//       setPrivateChats(new Map(privateChats));\n//     } else {\n//       let list = [];\n//       list.push(payloadData);\n//       privateChats.set(payloadData.senderName, list);\n//       setPrivateChats(new Map(privateChats));\n//     }\n//   }*/\n//     const onPrivateMessage = (payload) => {\n//       var payloadData = JSON.parse(payload.body);\n//       if (privateChats.get(payloadData.senderName)) {\n//         privateChats.get(payloadData.senderName).push(payloadData);\n//         setPrivateChats(new Map(privateChats));\n//       } else {\n//         let list = [];\n//         list.push(payloadData);\n//         privateChats.set(payloadData.senderName, list);\n//         setPrivateChats(new Map(privateChats));\n//       }\n//       if (tab !== payloadData.senderName) {\n//         let count = unreadMessages.get(payloadData.senderName) || 0;\n//         unreadMessages.set(payloadData.senderName, count + 1);\n//         setUnreadMessages(new Map(unreadMessages));\n//       }\n//     }\n//     const handleTabChange = (name) => {\n//       setTab(name);\n//       if (unreadMessages.get(name)) {\n//         unreadMessages.set(name, 0);\n//         setUnreadMessages(new Map(unreadMessages));\n//       }\n//     };\n//   const onError = (err) => {\n//     console.log(err);\n//   }\n//   const handleMessage = (event) => {\n//     const { value } = event.target;\n//     setUserData({ ...userData, \"message\": value });\n//   }\n//   const sendValue = () => {\n//     if (stompClient) {\n//       var chatMessage = {\n//         senderName: userData.username,\n//         message: userData.message,\n//         status: \"MESSAGE\"\n//       };\n//       console.log(chatMessage);\n//       stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, \"message\": \"\" });\n//     }\n//   }\n//   const sendPrivateValue = () => {\n//     if (stompClient) {\n//       var chatMessage = {\n//         senderName: userData.username,\n//         receiverName: tab,\n//         message: userData.message,\n//         status: \"MESSAGE\"\n//       };\n//       if (userData.username !== tab) {\n//         privateChats.get(tab).push(chatMessage);\n//         setPrivateChats(new Map(privateChats));\n//       }\n//       stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, \"message\": \"\" });\n//     }\n//   }\n//   const handleUsername = (event) => {\n//     const { value } = event.target;\n//     setUserData({ ...userData, \"username\": value });\n//   }\n//   const registerUser = () => {\n//     connect();\n//   }\n// /*\n//   return (\n//     <ChatRoomUI\n//       userData={userData}\n//       privateChats={privateChats}\n//       publicChats={publicChats}\n//       tab={tab}\n//       setTab={setTab}\n//       handleMessage={handleMessage}\n//       sendValue={sendValue}\n//       sendPrivateValue={sendPrivateValue}\n//       handleUsername={handleUsername}\n//       registerUser={registerUser}\n//     />\n//   );*/\n//   return (\n//     <ChatRoomUI\n//       userData={userData}\n//       privateChats={privateChats}\n//       publicChats={publicChats}\n//       tab={tab}\n//       //setTab={setTab}\n//       setTab={handleTabChange}\n//       handleMessage={handleMessage}\n//       sendValue={sendValue}\n//       sendPrivateValue={sendPrivateValue}\n//       handleUsername={handleUsername}\n//       registerUser={registerUser}\n//       unreadMessages={unreadMessages}\n//       //setUnreadMessages={setUnreadMessages} // Añadir esta línea\n//     />\n//   );\n// }\n// export default ChatRoom;\n\n/* \r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived);\r\n    userJoin();\r\n  }\r\n\r\n  const onNotificationReceived = (payload) => {\r\n    var notification = JSON.parse(payload.body);\r\n    alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, username: value });\r\n  }\r\n\r\n  const registerUser = () => {\r\n    setUserData({ ...userData, connected: true });\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      unreadMessages={unreadMessages}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n */\n\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n    const connect = () => {\r\n      let Sock = new SockJS('http://localhost:8080/ws');\r\n      stompClient = over(Sock);\r\n      stompClient.connect({username: userData.username}, onConnected, onError);\r\n    }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const onNotificationReceived = (payload) => {\r\n    var notification = JSON.parse(payload.body);\r\n    alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={setTab}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n*/\n\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;*/\n\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n*/\n\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\nimport DOMPurify from 'dompurify';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n    errors: {}\r\n  });\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const sanitizeInput = (input) => {\r\n    return DOMPurify.sanitize(input);\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  \r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    \r\n    if (name === \"username\") {\r\n      // Filtrar los caracteres no permitidos solo para el campo de nombre de usuario\r\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\r\n      setUserData({ ...userData, [name]: filteredValue });\r\n    } else {\r\n      setUserData({ ...userData, [name]: value });\r\n      const sanitizedValue = DOMPurify.sanitize(value);\r\n      //setUserData({ ...userData, [name]: sanitizedValue });\r\n    }\r\n  };\r\n\r\n\r\n \r\n\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const validateUsername = (username) => {\r\n    const re = /^[a-zA-Z]+$/;\r\n    return re.test(username);\r\n  };\r\n\r\n  const validateFields = () => {\r\n    const errors = {};\r\n    if (!userData.username || !validateUsername(userData.username)) {\r\n      errors.username = \"El nombre de usuario solo puede contener letras\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    if (!userData.email || !validateEmail(userData.email)) {\r\n      errors.email = \"El email no es válido\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const registerUser = async () => {\r\n    const errors = validateFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const validateLoginFields = () => {\r\n    const errors = {};\r\n    if (!userData.username) {\r\n      errors.username = \"El nombre de usuario no puede estar vacío\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    return errors;\r\n  };\r\n  \r\n  const loginUser = async () => {\r\n    const errors = validateLoginFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true, errors: {} });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n      setUserData({ ...userData, errors: { ...errors, login: 'Nombre de usuario o contraseña incorrectos' } });\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n*/\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport axios from 'axios';\nimport DOMPurify from 'dompurify';\nimport ChatRoomUI from './ChatRoomUI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\n  const [userData, setUserData] = useState({\n    username: '',\n    password: '',\n    email: '',\n    receivername: '',\n    connected: false,\n    message: '',\n    errors: {},\n    searchQuery: '' // Nuevo estado para la búsqueda de usuarios\n\n  });\n  const [userList, setUserList] = useState([]); // Lista de usuarios\n\n  useEffect(() => {\n    if (userData.connected) {\n      connect();\n      fetchUsers(); // Obtener la lista de usuarios cuando el usuario se conecta\n    }\n  }, [userData.connected]);\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({\n      username: userData.username\n    }, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n\n    if (tab !== payloadData.senderName) {\n      setUnreadMessages(prevUnreadMessages => {\n        const newUnreadMessages = new Map(prevUnreadMessages);\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\n        newUnreadMessages.set(payloadData.senderName, count + 1);\n        return newUnreadMessages;\n      });\n    }\n  };\n\n  const handleTabChange = name => {\n    setTab(name);\n    setUnreadMessages(prevUnreadMessages => {\n      const newUnreadMessages = new Map(prevUnreadMessages);\n      newUnreadMessages.delete(name);\n      return newUnreadMessages;\n    });\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      message: value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        message: \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        message: \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      name,\n      value\n    } = event.target;\n\n    if (name === \"username\") {\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\n      setUserData({ ...userData,\n        [name]: filteredValue\n      });\n    } else {\n      setUserData({ ...userData,\n        [name]: value\n      });\n      const sanitizedValue = DOMPurify.sanitize(value);\n    }\n  };\n\n  const validateEmail = email => {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(String(email).toLowerCase());\n  };\n\n  const validateUsername = username => {\n    const re = /^[a-zA-Z]+$/;\n    return re.test(username);\n  };\n\n  const validateFields = () => {\n    const errors = {};\n\n    if (!userData.username || !validateUsername(userData.username)) {\n      errors.username = \"El nombre de usuario solo puede contener letras\";\n    }\n\n    if (!userData.password) {\n      errors.password = \"La contraseña no puede estar vacía\";\n    }\n\n    if (!userData.email || !validateEmail(userData.email)) {\n      errors.email = \"El email no es válido\";\n    }\n\n    return errors;\n  };\n\n  const registerUser = async () => {\n    const errors = validateFields();\n\n    if (Object.keys(errors).length > 0) {\n      setUserData({ ...userData,\n        errors\n      });\n      return;\n    }\n\n    try {\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\n        username: userData.username,\n        password: userData.password,\n        email: userData.email\n      });\n      console.log(response.data);\n      setIsRegistering(false);\n    } catch (error) {\n      console.error('Registration failed:', error.response.data);\n    }\n  };\n\n  const validateLoginFields = () => {\n    const errors = {};\n\n    if (!userData.username) {\n      errors.username = \"El nombre de usuario no puede estar vacío\";\n    }\n\n    if (!userData.password) {\n      errors.password = \"La contraseña no puede estar vacía\";\n    }\n\n    return errors;\n  };\n\n  const loginUser = async () => {\n    const errors = validateLoginFields();\n\n    if (Object.keys(errors).length > 0) {\n      setUserData({ ...userData,\n        errors\n      });\n      return;\n    }\n\n    try {\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\n        username: userData.username,\n        password: userData.password\n      });\n      console.log(response.data);\n      setUserData({ ...userData,\n        connected: true,\n        errors: {}\n      });\n    } catch (error) {\n      console.error('Login failed:', error.response.data);\n      setUserData({ ...userData,\n        errors: { ...errors,\n          login: 'Nombre de usuario o contraseña incorrectos'\n        }\n      });\n    }\n  };\n\n  const fetchUsers = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/users');\n      setUserList(response.data);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n\n  const handleSearch = event => {\n    setUserData({ ...userData,\n      searchQuery: event.target.value\n    });\n  };\n\n  const filteredUserList = userList.filter(user => user.username.toLowerCase().includes(userData.searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(ChatRoomUI, {\n    userData: userData,\n    privateChats: privateChats,\n    publicChats: publicChats,\n    tab: tab,\n    setTab: handleTabChange,\n    handleMessage: handleMessage,\n    sendValue: sendValue,\n    sendPrivateValue: sendPrivateValue,\n    handleUsername: handleUsername,\n    registerUser: registerUser,\n    loginUser: loginUser,\n    unreadMessages: unreadMessages,\n    isRegistering: isRegistering,\n    setIsRegistering: setIsRegistering,\n    handleSearch: handleSearch,\n    filteredUserList: filteredUserList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1455,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"8YQlQMzcElPDF9JNc8khO2WSHk8=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/Distribuidas/Distribuidas/PARCIAL II/PROYECTO/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","SockJS","axios","DOMPurify","ChatRoomUI","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","unreadMessages","setUnreadMessages","userData","setUserData","username","password","email","receivername","connected","message","errors","searchQuery","userList","setUserList","connect","fetchUsers","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","push","list","prevUnreadMessages","newUnreadMessages","count","handleTabChange","name","delete","err","console","log","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","filteredValue","replace","sanitizedValue","sanitize","validateEmail","re","test","String","toLowerCase","validateUsername","validateFields","registerUser","Object","keys","length","response","post","data","setIsRegistering","error","validateLoginFields","loginUser","login","handleSearch","filteredUserList","filter","user","includes","isRegistering"],"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":["// import React, { useEffect, useState } from 'react';\r\n// import { over } from 'stompjs';\r\n// import SockJS from 'sockjs-client';\r\n// import ChatRoomUI from './ChatRoomUI';\r\n\r\n// var stompClient = null;\r\n\r\n// const ChatRoom = () => {\r\n//   const [privateChats, setPrivateChats] = useState(new Map());\r\n//   const [publicChats, setPublicChats] = useState([]);\r\n//   const [tab, setTab] = useState(\"CHATROOM\");\r\n//   const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n//   const [userData, setUserData] = useState({\r\n//     username: '',\r\n//     receivername: '',\r\n//     connected: false,\r\n//     message: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     console.log(userData);\r\n//   }, [userData]);\r\n\r\n//   const connect = () => {\r\n//     let Sock = new SockJS('http://localhost:8080/ws');\r\n//     stompClient = over(Sock);\r\n//     stompClient.connect({}, onConnected, onError);\r\n//   }\r\n// /*\r\n//   const onConnected = () => {\r\n//     setUserData({ ...userData, \"connected\": true });\r\n//     stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n//     stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n//     userJoin();\r\n//   }*/\r\n\r\n//     const onConnected = () => {\r\n//       setUserData({ ...userData, \"connected\": true });\r\n//       stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n//       stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n//       stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived); // Nueva suscripción\r\n//       userJoin();\r\n//   }\r\n  \r\n//   const onNotificationReceived = (payload) => {\r\n//       var notification = JSON.parse(payload.body);\r\n//       alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n//   }\r\n  \r\n\r\n//   const userJoin = () => {\r\n//     var chatMessage = {\r\n//       senderName: userData.username,\r\n//       status: \"JOIN\"\r\n//     };\r\n//     stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n//   }\r\n\r\n//   const onMessageReceived = (payload) => {\r\n//     var payloadData = JSON.parse(payload.body);\r\n//     switch (payloadData.status) {\r\n//       case \"JOIN\":\r\n//         if (!privateChats.get(payloadData.senderName)) {\r\n//           privateChats.set(payloadData.senderName, []);\r\n//           setPrivateChats(new Map(privateChats));\r\n//         }\r\n//         break;\r\n//       case \"MESSAGE\":\r\n//         publicChats.push(payloadData);\r\n//         setPublicChats([...publicChats]);\r\n//         break;\r\n//     }\r\n//   }\r\n// /*\r\n//   const onPrivateMessage = (payload) => {\r\n//     console.log(payload);\r\n//     var payloadData = JSON.parse(payload.body);\r\n//     if (privateChats.get(payloadData.senderName)) {\r\n//       privateChats.get(payloadData.senderName).push(payloadData);\r\n//       setPrivateChats(new Map(privateChats));\r\n//     } else {\r\n//       let list = [];\r\n//       list.push(payloadData);\r\n//       privateChats.set(payloadData.senderName, list);\r\n//       setPrivateChats(new Map(privateChats));\r\n//     }\r\n//   }*/\r\n\r\n//     const onPrivateMessage = (payload) => {\r\n//       var payloadData = JSON.parse(payload.body);\r\n//       if (privateChats.get(payloadData.senderName)) {\r\n//         privateChats.get(payloadData.senderName).push(payloadData);\r\n//         setPrivateChats(new Map(privateChats));\r\n//       } else {\r\n//         let list = [];\r\n//         list.push(payloadData);\r\n//         privateChats.set(payloadData.senderName, list);\r\n//         setPrivateChats(new Map(privateChats));\r\n//       }\r\n  \r\n//       if (tab !== payloadData.senderName) {\r\n//         let count = unreadMessages.get(payloadData.senderName) || 0;\r\n//         unreadMessages.set(payloadData.senderName, count + 1);\r\n//         setUnreadMessages(new Map(unreadMessages));\r\n//       }\r\n//     }\r\n\r\n//     const handleTabChange = (name) => {\r\n//       setTab(name);\r\n//       if (unreadMessages.get(name)) {\r\n//         unreadMessages.set(name, 0);\r\n//         setUnreadMessages(new Map(unreadMessages));\r\n//       }\r\n//     };\r\n    \r\n\r\n//   const onError = (err) => {\r\n//     console.log(err);\r\n//   }\r\n\r\n//   const handleMessage = (event) => {\r\n//     const { value } = event.target;\r\n//     setUserData({ ...userData, \"message\": value });\r\n//   }\r\n\r\n//   const sendValue = () => {\r\n//     if (stompClient) {\r\n//       var chatMessage = {\r\n//         senderName: userData.username,\r\n//         message: userData.message,\r\n//         status: \"MESSAGE\"\r\n//       };\r\n//       console.log(chatMessage);\r\n//       stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n//       setUserData({ ...userData, \"message\": \"\" });\r\n//     }\r\n//   }\r\n\r\n//   const sendPrivateValue = () => {\r\n//     if (stompClient) {\r\n//       var chatMessage = {\r\n//         senderName: userData.username,\r\n//         receiverName: tab,\r\n//         message: userData.message,\r\n//         status: \"MESSAGE\"\r\n//       };\r\n\r\n//       if (userData.username !== tab) {\r\n//         privateChats.get(tab).push(chatMessage);\r\n//         setPrivateChats(new Map(privateChats));\r\n//       }\r\n//       stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n//       setUserData({ ...userData, \"message\": \"\" });\r\n//     }\r\n//   }\r\n\r\n//   const handleUsername = (event) => {\r\n//     const { value } = event.target;\r\n//     setUserData({ ...userData, \"username\": value });\r\n//   }\r\n\r\n//   const registerUser = () => {\r\n//     connect();\r\n//   }\r\n// /*\r\n//   return (\r\n//     <ChatRoomUI\r\n//       userData={userData}\r\n//       privateChats={privateChats}\r\n//       publicChats={publicChats}\r\n//       tab={tab}\r\n//       setTab={setTab}\r\n//       handleMessage={handleMessage}\r\n//       sendValue={sendValue}\r\n//       sendPrivateValue={sendPrivateValue}\r\n//       handleUsername={handleUsername}\r\n//       registerUser={registerUser}\r\n//     />\r\n//   );*/\r\n\r\n//   return (\r\n//     <ChatRoomUI\r\n//       userData={userData}\r\n//       privateChats={privateChats}\r\n//       publicChats={publicChats}\r\n//       tab={tab}\r\n//       //setTab={setTab}\r\n//       setTab={handleTabChange}\r\n//       handleMessage={handleMessage}\r\n//       sendValue={sendValue}\r\n//       sendPrivateValue={sendPrivateValue}\r\n//       handleUsername={handleUsername}\r\n//       registerUser={registerUser}\r\n//       unreadMessages={unreadMessages}\r\n//       //setUnreadMessages={setUnreadMessages} // Añadir esta línea\r\n//     />\r\n//   );\r\n  \r\n  \r\n// }\r\n\r\n// export default ChatRoom;\r\n/* \r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    stompClient.subscribe('/user/' + userData.username + '/queue/notifications', onNotificationReceived);\r\n    userJoin();\r\n  }\r\n\r\n  const onNotificationReceived = (payload) => {\r\n    var notification = JSON.parse(payload.body);\r\n    alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, username: value });\r\n  }\r\n\r\n  const registerUser = () => {\r\n    setUserData({ ...userData, connected: true });\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      unreadMessages={unreadMessages}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n    const connect = () => {\r\n      let Sock = new SockJS('http://localhost:8080/ws');\r\n      stompClient = over(Sock);\r\n      stompClient.connect({username: userData.username}, onConnected, onError);\r\n    }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const onNotificationReceived = (payload) => {\r\n    var notification = JSON.parse(payload.body);\r\n    alert(notification.message); // Muestra una alerta, puedes personalizar esto para mostrar notificaciones en tu UI\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={setTab}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n*/\r\n\r\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      let count = unreadMessages.get(payloadData.senderName) || 0;\r\n      unreadMessages.set(payloadData.senderName, count + 1);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    if (unreadMessages.get(name)) {\r\n      unreadMessages.set(name, 0);\r\n      setUnreadMessages(new Map(unreadMessages));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;*/\r\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n*/\r\n\r\n\r\n\r\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\nimport DOMPurify from 'dompurify';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n    errors: {}\r\n  });\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const sanitizeInput = (input) => {\r\n    return DOMPurify.sanitize(input);\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  \r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    \r\n    if (name === \"username\") {\r\n      // Filtrar los caracteres no permitidos solo para el campo de nombre de usuario\r\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\r\n      setUserData({ ...userData, [name]: filteredValue });\r\n    } else {\r\n      setUserData({ ...userData, [name]: value });\r\n      const sanitizedValue = DOMPurify.sanitize(value);\r\n      //setUserData({ ...userData, [name]: sanitizedValue });\r\n    }\r\n  };\r\n\r\n\r\n \r\n\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const validateUsername = (username) => {\r\n    const re = /^[a-zA-Z]+$/;\r\n    return re.test(username);\r\n  };\r\n\r\n  const validateFields = () => {\r\n    const errors = {};\r\n    if (!userData.username || !validateUsername(userData.username)) {\r\n      errors.username = \"El nombre de usuario solo puede contener letras\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    if (!userData.email || !validateEmail(userData.email)) {\r\n      errors.email = \"El email no es válido\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const registerUser = async () => {\r\n    const errors = validateFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const validateLoginFields = () => {\r\n    const errors = {};\r\n    if (!userData.username) {\r\n      errors.username = \"El nombre de usuario no puede estar vacío\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    return errors;\r\n  };\r\n  \r\n  const loginUser = async () => {\r\n    const errors = validateLoginFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true, errors: {} });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n      setUserData({ ...userData, errors: { ...errors, login: 'Nombre de usuario o contraseña incorrectos' } });\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n*/\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport axios from 'axios';\r\nimport DOMPurify from 'dompurify';\r\nimport ChatRoomUI from './ChatRoomUI';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: '',\r\n    errors: {},\r\n    searchQuery: '' // Nuevo estado para la búsqueda de usuarios\r\n  });\r\n  const [userList, setUserList] = useState([]); // Lista de usuarios\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n      fetchUsers(); // Obtener la lista de usuarios cuando el usuario se conecta\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({ username: userData.username }, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    if (name === \"username\") {\r\n      const filteredValue = value.replace(/[^a-zA-Z0-9\\s]/g, '');\r\n      setUserData({ ...userData, [name]: filteredValue });\r\n    } else {\r\n      setUserData({ ...userData, [name]: value });\r\n      const sanitizedValue = DOMPurify.sanitize(value);\r\n    }\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const validateUsername = (username) => {\r\n    const re = /^[a-zA-Z]+$/;\r\n    return re.test(username);\r\n  };\r\n\r\n  const validateFields = () => {\r\n    const errors = {};\r\n    if (!userData.username || !validateUsername(userData.username)) {\r\n      errors.username = \"El nombre de usuario solo puede contener letras\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    if (!userData.email || !validateEmail(userData.email)) {\r\n      errors.email = \"El email no es válido\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const registerUser = async () => {\r\n    const errors = validateFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const validateLoginFields = () => {\r\n    const errors = {};\r\n    if (!userData.username) {\r\n      errors.username = \"El nombre de usuario no puede estar vacío\";\r\n    }\r\n    if (!userData.password) {\r\n      errors.password = \"La contraseña no puede estar vacía\";\r\n    }\r\n    return errors;\r\n  };\r\n  \r\n  const loginUser = async () => {\r\n    const errors = validateLoginFields();\r\n    if (Object.keys(errors).length > 0) {\r\n      setUserData({ ...userData, errors });\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true, errors: {} });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n      setUserData({ ...userData, errors: { ...errors, login: 'Nombre de usuario o contraseña incorrectos' } });\r\n    }\r\n  };\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/users');\r\n      setUserList(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n    }\r\n  }\r\n\r\n  const handleSearch = (event) => {\r\n    setUserData({ ...userData, searchQuery: event.target.value });\r\n  };\r\n\r\n  const filteredUserList = userList.filter(user => \r\n    user.username.toLowerCase().includes(userData.searchQuery.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n      handleSearch={handleSearch}\r\n      filteredUserList={filteredUserList}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n\r\n\r\n\r\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ChatRoomUI from './ChatRoomUI';\r\nimport axios from 'axios';\r\n\r\nlet stompClient = null;\r\n\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [unreadMessages, setUnreadMessages] = useState(new Map());\r\n\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    receivername: '',\r\n    connected: false,\r\n    message: ''\r\n  });\r\n\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userData.connected) {\r\n      connect();\r\n    }\r\n  }, [userData.connected]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({username: userData.username}, onConnected, onError);\r\n  }\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n    userJoin();\r\n  }\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\"\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  }\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n\r\n    if (tab !== payloadData.senderName) {\r\n      setUnreadMessages(prevUnreadMessages => {\r\n        const newUnreadMessages = new Map(prevUnreadMessages);\r\n        const count = newUnreadMessages.get(payloadData.senderName) || 0;\r\n        newUnreadMessages.set(payloadData.senderName, count + 1);\r\n        return newUnreadMessages;\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (name) => {\r\n    setTab(name);\r\n    setUnreadMessages(prevUnreadMessages => {\r\n      const newUnreadMessages = new Map(prevUnreadMessages);\r\n      newUnreadMessages.delete(name);\r\n      return newUnreadMessages;\r\n    });\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    const { value } = event.target;\r\n    setUserData({ ...userData, message: value });\r\n  }\r\n\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\"\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  }\r\n\r\n  const handleUsername = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  }\r\n\r\n  const registerUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/register', {\r\n        username: userData.username,\r\n        password: userData.password,\r\n        email: userData.email\r\n      });\r\n      console.log(response.data);\r\n      setIsRegistering(false);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n      console.log(response.data);\r\n      setUserData({ ...userData, connected: true });\r\n    } catch (error) {\r\n      console.error('Login failed:', error.response.data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ChatRoomUI\r\n      userData={userData}\r\n      privateChats={privateChats}\r\n      publicChats={publicChats}\r\n      tab={tab}\r\n      setTab={handleTabChange}\r\n      handleMessage={handleMessage}\r\n      sendValue={sendValue}\r\n      sendPrivateValue={sendPrivateValue}\r\n      handleUsername={handleUsername}\r\n      registerUser={registerUser}\r\n      loginUser={loginUser}\r\n      unreadMessages={unreadMessages}\r\n      isRegistering={isRegistering}\r\n      setIsRegistering={setIsRegistering}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ChatRoom;*/"]},"metadata":{},"sourceType":"module"}